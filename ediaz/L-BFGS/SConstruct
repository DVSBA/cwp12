from rsf.proj import *

projx =Project()
projx.Prepend(LIBS=['rsff90'])

#projx.Program(['sdrive.f90','lbfgs.f'],
#             LINK=projx.get('F90'),
#             F90PATH=projx.get('CPPPATH'),
#             LINKFLAGS=projx.get('F90FLAGS'))

projx.Program(['sdrive2.f90','lbfgs.f'],
             LINK=projx.get('F90'),
             F90PATH=projx.get('CPPPATH'),
             LINKFLAGS=projx.get('F90FLAGS'))




'''
test driver from Nocedal implemented it 
in an out of core way.

Tests in his paper shows that L-BFGS requires less
function evaluations than many other methods.
'''


xo=100
sx=180

yo=100
sy=180

Flow('Gauss',None,'math n1=200 n2=200 o1=-100 o2=-100 output="x1*x1+x2*x2 "')
Result('Gauss','Gauss','grey color=j allpos=y')


def grdx(name,x,y):
    Flow(name,None,'math type=complex n1=1 output="2.0*(%g) +I*2*(%g)"'%(x,y))  


mo=[-4000.0,1293100.0]

grdx('gxo',mo[0],mo[1])



