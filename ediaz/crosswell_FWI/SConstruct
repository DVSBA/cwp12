from rsf.cluster import *
import fdmod

###################
# Have to call Cluster first
Cluster(name='solver_demo2',email='tyang@mines.edu',time=1, ppn=12)
###################

# ------------------------------------------------------------
f2m=0.3048
par = dict(
    nx=1201,ox=22.*f2m,dx=0.025*f2m,lx='x',ux='km',
    nz=900, oz=6.5*f2m,dz=0.025*f2m,lz='z',uz='km',
    nt=12000,ot=0,      dt=0.0005,    lt='t',ut='s',
    jsnap=250,
    jwfld=20,
    kt=600,
    nb=100,
    frq=5,
    orec=2.25, jrec=1,   nrec=850,
    osou=3.0,  jsou=50, nsou=15
    )

# wavefield save window
par['nqx']=par['nx']
par['nqz']=par['nz']
par['oqx']=par['ox']
par['oqz']=par['oz']

# wavefield frames
par['nframe']=int((par['nt']-1)/par['jsnap'])
    
# standard deviation (in physical units)
par['dstd']=2  # amplitude units
par['mstd']=5  # km/s

# ------------------------------------------------------------
fdmod.param(par)

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',par['frq'],par) 
Flow(  'wav','wav_','transp | scale rscale=1')      
Result('wav','window n2=1000 | scale axis=123'
       + fdmod.waveplot('',par)) 

# ------------------------------------------------------------
# sources
par['fsou']=int((par['osou']-par['oz'])/par['dz'])
SHOTS=range(par['fsou'],
            par['fsou']+par['nsou']*par['jsou'],
            par['jsou'])
for s in SHOTS:
    stag = "-%03d"%s

    fdmod.point('ss'+stag,7,par['oz']+s*par['dz'],par)
    Plot('ss'+stag,fdmod.ssplot('plotcol=0 plotfat=20',par))
Plot('ss',map(lambda x: 'ss-%03d' % x,SHOTS),'Overlay')

fdmod.point('ss',7,par['oz']+0.5*par['nz']*par['dz'],par)

# ------------------------------------------------------------
# receiver coordinates
fdmod.vertical('tr',15.5,par)
Flow('rr','tr',
     'window j2=%(jrec)d min2=%(orec)g n2=%(nrec)d'%par)
Plot('rr',fdmod.rrplot('',par)) 

# ------------------------------------------------------------
# velocity
strvelfile = 'data/sigsbee/sigsbee2a_stratigraphy.sgy'
Flow('vraw',strvelfile,'segyread read=data')
Flow('velo',
     'vraw',
     '''
     scale rscale=%g |
     put o1=%g d1=%g o2=%g d2=%g |
     window n1=%d min1=%g n2=%d min2=%g 
     ''' % (0.001*f2m,
            0     ,0.025*f2m,
            10*f2m,0.025*f2m,
            par['nz'],par['oz'],
            par['nx'],par['ox']
            ))

# ------------------------------------------------------------
# salt mask
Flow(  'smask','velo','mask min=4.499 | dd type=float')
Result('smask',fdmod.cgrey('allpos=y',par))
    
# water mask
Flow(  'wmask','velo','mask max=1.50 | dd type=float')
Result('wmask',fdmod.cgrey('allpos=y',par))

# sediment mask
Flow(  'lmask',['smask','wmask'],'add ${SOURCES[1]} | math output="1-input"')
Result('lmask',fdmod.cgrey('allpos=y',par))

# ------------------------------------------------------------
# v(z) background
Flow('vofz','smask velo wmask',
     '''
     math v=${SOURCES[1]} output="input*1.95+(1-input)*v" |
     smooth rect1=100 rect2=100 |
     math w=${SOURCES[2]} output="input*(1-w)+1.5*w"
     '''%par)
Result('vofz',fdmod.cgrey('allpos=y color=j bias=1.5',par))

# ------------------------------------------------------------
# velocity models
# C: correct
# S: starting
# R: reference

Flow('velC','velo','window')
Flow('velS','smask vofz','math v=${SOURCES[1]} output="input*4.51147+(1-input)*v"')
Flow('velR','smask velo','math v=${SOURCES[1]} output="input*4.51147+(1-input)*v"')

par['jC']=0
par['jS']=1
par['jR']=2
Flow('vbyt vbar','velC velS velR',
     '''
     cat axis=3 space=n ${SOURCES[1:3]} |
     byte gainpanel=a pclip=100 bar=${TARGETS[1]} bias=1.5 allpos=y
     ''')
for v in ('C','S','R'):
    Plot(  'vel'+v,
         'vbyt vbar',
         'window n3=1 f3=%d |'%par['j'+v] +
         fdmod.cgrey('bias=1.5 color=j bar=${SOURCES[1]}',par))
    Result('vel'+v,['vel'+v,'ss','rr'],'Overlay')

# ------------------------------------------------------------
# slowness squared
for v in ('C','S','R'):
    Flow('sls'+v,'vel'+v,'math output="1/(input*input)"')

# ------------------------------------------------------------
# density
Flow(  'dens','velo','math output=1')
Plot(  'dens',fdmod.cgrey('allpos=y bias=1.43',par))
Result('dens',['dens','ss','rr'],'Overlay')

# ------------------------------------------------------------
# reference data
fdmod.awefd('dC','wC','wav','velC','dens','ss','rr','free=n',par)

# ------------------------------------------------------------
# data mask
fdmod.gauss1z('dmask',5.5,2.0,par)

# ------------------------------------------------------------
# data stdev
Flow('dstdv','dC',
     '''
     stack axis=2 max=y |
     stack axis=1 max=y |
     math output="0.01*input*%(dstd)g"
     '''%par)

# data weight = 1/stdev
Flow('dwght','dstdv dmask',
     '''
     math output="1/input" |
     spray axis=1 n=%(nz)d o=%(oz)g d=%(dz)g |
     add mode=p ${SOURCES[1]} |
     window j1=%(jrec)d min1=%(orec)g n1=%(nrec)d |
     spray axis=2 n=%(nt)d o=%(ot)g d=%(dt)g
     '''%par)
Result('dwght','window j2=%(jwfld)d |'%par
       + fdmod.egrey('allpos=y color=j',par))

# ------------------------------------------------------------
# model stdev
Flow(  'mstdv','slsC',
     '''
     stack max=y axis=2 |
     stack max=y axis=1 |
     math output="0.01*input*%(mstd)g"
     '''%par)

# model weight = 1/stdev
Flow(  'mwght','mstdv',
     '''
     math output="1/input" |
     spray axis=1 n=%(nz)d o=%(oz)g d=%(dz)g |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g
     '''%par)
Result('mwght',fdmod.cgrey('allpos=y color=j',par))

# ------------------------------------------------------------
Flow('imag','velo',
     '''
     window f1=1 |
     pad n1out=%(nz)d |
     add ${SOURCES[0]} scale=+1,-1 |
     ricker1 frequency=6
     '''%par)
Result('imag',fdmod.cgrey('pclip=99',par))

# dip field
Flow('mdipf','imag',
     'dip order=2 p0=0 verb=y niter=20 rect1=10 rect2=10')
Result('mdipf',fdmod.cgrey('color=j pclip=99.9',par))

# model mask (i.e. borehole locations): K
Flow('mmask','dens',
     '''
     spike nsp=1 n1=%d n2=%d n3=%d k2=%d |
     put n2=%d n3=1 |
     pad n2out=%d |
     '''%(par['nz'],
           (par['nx']-1)/5,5,
           110,
           par['nx']-1,par['nx']) +
     '''
     put o1=%(oz)g d1=%(dz)g o2=%(ox)g d2=%(dx)g
     '''%par)
Result('mmask','smooth rect2=10 |' + fdmod.cgrey('',par))

# ------------------------------------------------------------
# parallel flag
Fork(time=5,ipn=1,nodes=15)

for s in SHOTS:
    stag = "-%03d"%s

    # data
    fdmod.awefd('dC'+stag,'wC'+stag,'wav','velC','dens','ss'+stag,'rr','free=n',par)
    fdmod.awefd('dS'+stag,'uS'+stag,'wav','velS','dens','ss'+stag,'rr','free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)

    # noise
    Flow('rC'+stag,
         'dC'+stag,
         '''
         stack axis=2 max=y |
         stack axis=1 max=y |
         math output="0.01*input*%(dstd)g" |
         spray axis=1 n=%(nz)d o=%(oz)g d=%(dz)g |
         window j1=%(jrec)d min1=%(orec)g n1=%(nrec)d |
         spray axis=2 n=%(nt)d o=%(ot)g d=%(dt)g
         '''%par)

    Flow('nC'+stag,
         'rC'+stag,
         '''
         noise rep=y |
         transp |
         ricker1 frequency=%(frq)g |
         transp |
         scale axis=123 |
         add mode=p ${SOURCES[0]}
         '''%par)
    Flow('datC'+stag,['dC'+stag,'nC'+stag],
         'add scale=1,1 ${SOURCES[1]}')

    # ------------------------------------------------------------
    # simulated data & state variables
    Flow('datS'+stag,'dS'+stag,'window')

    # ------------------------------------------------------------
    # plot data
    for v in ('C','S'):
        Result('dat'+v+stag,'window j2=%(jwfld)d |'%par
               + fdmod.egrey('pclip=99.9',par))

        # parallel flag
        Iterate()

# parallel flag
Join()

End()

