'''
this script is made for testing the 
time-domain implementation of Tony's MVA
method. 

The test is performed with a constant velocity
medium. 

Three models are used: 
- Low       (-20% anomaly)
- Correct   (  0% anomaly)
- High      (+20% anomaly)
'''

from rsf.proj import *
import fdmod,encode,wei,adcig,wemig
import math

# ------------------------------------------------------------
par = {
    'nx':601, 'ox':0, 'dx':0.01,  'lx':'x', 'ux':'km',
    'ny':1,   'oy':0, 'dy':0.02,  'ly':'y', 'uy':'km',
    'nz':251, 'oz':0, 'dz':0.01,  'lz':'z', 'uz':'km',
    'nt':3500,'ot':0, 'dt':0.001, 'lt':'t', 'ut':'s',
    'kt':180,
    'jsnap':100,
    'nb':100,
    'frq':10,
    'ns':10,'os':0.0,'ds':0.25,'oxs':1.0
    }
fdmod.param(par)
# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=400
par['dht']=par['dt']
# lag parameters
par['mht']=2*par['nht']+1
par['oht']= -par['nht']*par['dht']
par['tratio']=1.0
par['xratio']=1.0
par['lratio']=1.0



adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)
# ------------------------------------------------------------


par['impulse']='n'

# taper parameters
par['xk']=100
par['yk']=50
par['zk']=100
par['xl']=par['nx']-par['xk']
par['zl']=par['nz']-par['zk']
par['yl']=par['ny']-par['yk']

# migration parameters
par['jw']=1
par['ow']=2
par['nw']=72
par['dw']=1/(par['nt']*par['dt'])

# deconvolution regularization
par['deps']=1e-5


# ------------------------------------------------------------
# source/receiver coordinates
# ------------------------------------------------------------

# source coordinates:

for ishot in range(par['ns']):
    stag='-%03d'%ishot
 
    zx=ishot*par['ds']+par['os']
    fdmod.point('s'+stag,par['oxs'],zx,par)
    Plot('s'+stag,fdmod.ssplot('',par))



Flow('ss',map(lambda x:'s-%03d'%x,range(par['ns'])), 'rcat axis=2 space=n ${SOURCES[1:%s]}'%(par['ns']))
Plot('ss',fdmod.ssplot('',par))








# receiver coordinates:
fdmod.vertical('rr_tmp',5.0,par)
Flow('rr','rr_tmp','window j2=%d'%int(par['ds']/par['dz']))


Plot('rr',fdmod.rrplot('',par))

# tlag gather coordinates:
fdmod.vertical('gg',3.0,par)
Plot('gg',fdmod.rrplot('plotcol=2',par))


# ------------------------------------------------------------
# Cig locations
# ------------------------------------------------------------
par['ogx'] = 1.30
par['dgx'] = 0.1
par['ngx'] = 35

ggloc=range(par['ngx'])

for g in ggloc:
    gtag='-%03d'%g
    fdmod.vertical('gg'+gtag,par['ogx']+g*par['dgx'],par)
    Plot('gg'+gtag,fdmod.rrplot('plotcol=2',par))
    


# ------------------------------------------------------------
# model parameters
# ------------------------------------------------------------
par['vp']=2.0
par['ro']=2.0

# ------------------------------------------------------------
# density< ur-c0-005-L.rsf ./sfadjsrc_mva2_omp.exe eic=pen_eic-c0-005-L.rsf coord=gg-c0.rsf source=0 verb=1 
# ------------------------------------------------------------
Flow('den',None,
    '''
    math  n1=%(nz)d o1=%(oz)g d1=%(dz)g
          n2=%(nx)d o2=%(ox)g d2=%(dx)g output="1.0"
    '''%par)

# velocity
# lateral gradient
#Flow('vel-L','den','math output=" %(vp)g +(1/(%(ox)g+(%(nx)d-1)*%(dx)g))*(x2-5.0) "'%par)
#Flow('vel-C','den','math output="%g"' %par['vp'])
#Flow('vel-H','den','math output=" %(vp)g -(1/(%(ox)g+(%(nx)d-1)*%(dx)g))*(x2-5.0) "'%par)

# constant error


Flow('vel-C','den','math output="%g"' %par['vp'])

par['cx']=(par['ox']+(par['nx']-1)*par['dx'])*.5
par['sx']=par['nx']*par['dx']*0.08

par['cz']=(par['oz']+(par['nz']-1)*par['dz'])*.5
par['sz']=par['sx']




Flow('vel-L','vel-C',' math  output="%g*0.8"'%par['vp'])
#Flow('vel-L','vel-C',' math  output="sqrt(1/(1.2*(1/%g)^2))"'%par['vp'])
Flow('vel-H','vel-C',' math  output="sqrt(1/(0.8*(1/%g)^2))"'%par['vp'])


# Plot velocities
Flow(['vels-byte','vels-bar'],['vel-L','vel-C','vel-H'],'cat axis=3 ${SOURCES[1:3]} |byte gainpanel=a allpos=y color=j bias=1.5 bar=${TARGETS[1]}')
i=0
for v in (['-L','-C','-H']):
    Plot('vel'+v,['vels-byte','vels-bar'],'window f3=%d n3=1 |'%i +fdmod.cgrey('bar=${SOURCES[1]} color=j ',par))
    i+=1

# Overlay velocities with sources, receivers and eic locations
for i in (['vel-L','vel-C','vel-H']):
    Result(i,[i,'rr','gg','ss'],'Overlay')

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',par['frq'],par)
Flow(  'wav','wav_','transp')
Result('wav','transp |' + fdmod.waveplot('',par))


# Generate data with true model
for ishot in range(par['ns']):
    stag='-%03d'%ishot
    fdmod.awefd_data('dat_tmps'+stag,'wav','vel-C','den','s'+stag,'rr','',par)
    Flow('dat_s'+stag,['dat_tmps'+stag],'window ')



# ------------------------------------------------------------
# I will test the gradient calculation using 4 different 
# cases:
#
# 2: 1 source , n receivers, n   cip ocation
#
# array case contain all these variables
# ------------------------------------------------------------

case1=[[5],5,17]

cases=[case1]

customfd='jsnap=1 '

for m in (['-L','-C','-H']):


    c=case1 
    shots=c[0]
    
    
    ##########################################################################################
    #          Read and process the cases table, each case separately to make 
    #          sure it makes what I want it to do.
    ##########################################################################################
    
    Flow('rr0','rr','window f2=%s n2=1'%c[1])
    Flow('gg0','gg-%03d'%c[2],'window ')
    tgrey='put n2=%(nz)d d2=%(dz)g o2=%(oz)g n3=1 | transp|'%par
    
    ##########################################################################################
    ##########################################################################################
    
    
    Plot('gg0',fdmod.rrplot('plotcol=2',par))
    Plot('rr0',fdmod.ssplot('',par))
    
    
    for ishot in shots:
        stag='-%03d'%ishot
    
        fdmod.awefd('dmod_tmp'+stag+m,'us'+stag+m,'wav','vel'+m,'den','s'+stag,'rr',customfd,par)
        Flow('dat_s'+stag,'dat_tmps'+stag,'window f1=%s n1=1 squeeze=n'%c[1])
        # Computing state variables us and ur
        Flow('dmod'+stag+m,['dmod_tmp'+stag+m],'window f1=%s n1=1 squeeze=n'%c[1])
    
               
        fdmod.awefd_rwfl('ur'+stag+m,'dat_s'+stag,'vel'+m,'den','rr0',customfd,par)


#        Flow('us'+stag+m,'us_tmp'+stag+m,'reverse which=1 opt=i | add scale=.5,.5 ${SOURCES[0]} ')
#        Flow('ur'+stag+m,'ur_tmp'+stag+m,'reverse which=1 opt=i | add scale=.5,.5 ${SOURCES[0]} ')


        fdmod.awefd_rwfl('urmod'+stag+m,'dmod'+stag+m,'vel'+m,'den','rr0',customfd,par)
    
        Flow('rimg'+stag+m,['us'+stag+m,'urmod'+stag+m],
            '''
            xcor2d axis=3 verb=n nbuf=200 uu=${SOURCES[1]}
            ''')
    
    
        # Extended imaging condition and only one location for every shot
        wemig.eic('eic'+stag+m,'us'+stag+m,'ur'+stag+m,'gg0','nhx=0 nhz=0 nht=%(nht)d|window squeeze=y'%par,par)
        wemig.eic('eica'+stag+m,'us'+stag+m,'urmod'+stag+m,'gg0','nhx=0 nhz=0 nht=%(nht)d|window squeeze=y'%par,par)
       
        Flow('eic-fake'+stag+m,'eic'+stag+m,'spike nsp=1 mag=1 k1=650 l1=650 ') 
            
        Flow('mask_eic'+stag+m,'eica'+stag+m,
             '''
             envelope| smooth rect1=3 rect2=10 repeat=10 |
             window n1=1 min1=0 |scale axis=123|
             math output="input^2.5"| 
             spray axis=1 n=%d d=%g o=%g
             '''%(par['nht']*2+1,par['dht'],-par['nht']*par['dht']))
   
        Flow('pen_eic'+stag+m,['eic'+stag+m,'mask_eic'+stag+m],'scale axis=123|math output="(x1*input)"|add mode=p ${SOURCES[1]}')
    


        # Adjoint source, receiver side
        Flow('adj_r'+stag+m,['us'+stag+m,'pen_eic'+stag+m,'gg0'],
             '''
             ./sfadjsrc_mva2_omp.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=1 verb=1 |
             transp plane=12  memsize=8000
             ''')
        # Adjoint source, source side
        Flow('adj_s'+stag+m,['ur'+stag+m,'pen_eic'+stag+m,'gg0'],
             '''
             ./sfadjsrc_mva2_omp.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=0 verb=1 |
             transp plane=12 memsize=8000
             ''')
    
       # # Adjoint state variables
       # fdmod.awefd_rwfl('as'+stag+m,'adj_s'+stag+m,'vel'+m,'den','gg0',customfd,par)
       # # Adjoint source, receiver side
       # Flow('adj_r'+stag+m,['us'+stag+m,'pen_eic'+stag+m,'gg0','wav_'],
       #      '''
       #      ./sfadjsrc_mva2_omp.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=1 verb=1 |
       #       sinc pattern=${SOURCES[3]} | transp plane=12  memsize=8000
       #      ''')
       # # Adjoint source, source side
       # Flow('adj_s'+stag+m,['ur'+stag+m,'pen_eic'+stag+m,'gg0','wav_'],
       #      '''
       #      ./sfadjsrc_mva2_omp.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=0 verb=1 |
       #      sinc pattern=${SOURCES[3]} | transp plane=12 memsize=8000
       #      ''')
    
        # Adjoint state variables
        fdmod.awefd_rwfl('as'+stag+m,'adj_s'+stag+m,'vel'+m,'den','gg0',customfd,par)
        fdmod.awefd_swfl('ar'+stag+m,'adj_r'+stag+m,'vel'+m,'den','gg0',customfd,par)
    
        # Gradient calculation 
        # sgrad:  source side gradient 
        #      sgrad = \int us*as dt
        # rgrad:  source side gradient 
        #      rgrad = \int ur*ar dt
    
        custom='deriv3 axis=3|deriv3 axis=3 |xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100'
        Flow('sgrad'+stag+m,['us'+stag+m,'as'+stag+m],custom)
        Flow('rgrad'+stag+m,['ur'+stag+m,'ar'+stag+m],custom)
    
    
        #plotting of gradients
        Plot('sgrad'+stag+m,fdmod.cgrey('color=E pclip=99.9',par))
        Result('sgrad'+stag+m,['sgrad'+stag+m,'gg','rr','ss'],'Overlay')
    
        Plot('rgrad'+stag+m,fdmod.cgrey('color=E pclip=99.9',par))
        Result('rgrad'+stag+m,['rgrad'+stag+m,'gg','rr','ss'],'Overlay')
    
        ggt=[0,50,100,125,200,250]


        for igg in ggt:
            gtag='-g%03d'%igg
            Flow('gg'+gtag,'gg0','window n2=1 f2=%d'%igg)

            Flow('adj_s'+stag+m+gtag,'adj_s'+stag+m,'window n1=1 f1=%d squeeze=n'%igg)
            Flow('adj_r'+stag+m+gtag,'adj_r'+stag+m,'window n1=1 f1=%d squeeze=n'%igg)


            fdmod.awefd_rwfl('as'+stag+m+gtag,'adj_s'+stag+m+gtag,'vel'+m,'den','gg'+gtag,customfd,par)
            fdmod.awefd_swfl('ar'+stag+m+gtag,'adj_r'+stag+m+gtag,'vel'+m,'den','gg'+gtag,customfd,par)

            Flow('sgrad'+stag+m+gtag,['us'+stag+m,'as'+stag+m+gtag],custom)
            Flow('rgrad'+stag+m+gtag,['ur'+stag+m,'ar'+stag+m+gtag],custom)

            Flow('grad'+stag+m+gtag,['sgrad'+stag+m+gtag,'rgrad'+stag+m+gtag],'add ${SOURCES[1]}')
            Result('grad'+stag+m+gtag,fdmod.cgrey('',par))


        Flow('grad_k'+stag+m,map(lambda x:'grad'+stag+m+'-g%03d'%x,ggt),'cat ${SOURCES[1:%d]} |stack axis=3 norm=n'%len(ggt))







    
    Flow('eic'+m,map(lambda x:'eic'+'-%03d'%x+m,shots),'add ${SOURCES[1:%d]}'%len(shots))
    Flow('pen_eic'+m,map(lambda x:'pen_eic'+'-%03d'%x+m,shots),'add ${SOURCES[1:%d]}'%len(shots))
    
    # stack of individual gradient contributions
    # total source gradient
    Flow('sgrad'+m,map(lambda x:'sgrad'+'-%03d'%x+m,shots),'add scale=1 ${SOURCES[1:%d]}'%len(shots))
    
    
    Result('sgrad'+m,map(lambda x:'sgrad'+'-%03d'%x+m,shots),'Movie')
    
    # totall receiver gradient
    Flow('rgrad'+m,map(lambda x:'rgrad'+'-%03d'%x+m,shots),'add scale=1 ${SOURCES[1:%d]}'%len(shots))
    Result('rgrad'+m,map(lambda x:'rgrad'+'-%03d'%x+m,shots),'Movie')
    
    # total gradient:  sgrad + rgrad
    Flow('grad'+m,['sgrad'+m,'rgrad'+m],'add scale=1 ${SOURCES[1]} ')
    

End()
