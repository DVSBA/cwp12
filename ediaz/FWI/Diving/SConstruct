# 
from rsf.proj import *
import fdmod,adcig,encode,wemig,math
import commands, os



def grapht(custom,par):
    return '''
    graph label2="" title="" n2tic=0 
    label1="\F10 t \F3 " unit1="s" screenratio=0.3 screenht=4 yll=2
    labelsz=6 labelfat=3 titlesz=12 plotfat=7 
    %s
    '''%custom



par = {
    'nt':4001, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':275 , 'dx':0.030 , 'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.030 , 'oy':0, 'ly':'y', 'uy':'km',
    'nz':125,  'dz':0.030 , 'oz':0, 'lz':'z', 'uz':'km',
    'kt':150,
    'nb':150,
    'jsnap_gr':25,
    'jwfld':5
    }
fdmod.param(par)
# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=5
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source

# ------------------------------------------------------------
# receivers

# ------------------------------------------------------------
# CIGs at uniformly-sampled locations
# ------------------------------------------------------------

# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=100
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',6,par)
Flow(  'wav', 'wav_','transp')

Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=100
par['xl']=par['nx']-100

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=30 repeat=50
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

#================================================================================
Flow('velC',None,
    '''
    spike nsp=1 mag=1.0
    n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=1 l1=%(nz)d |
    spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
    add add=1 |
    put label1=%(lz)s unit1=%(uz)s label2=%(lx)s unit2=%(ux)s
    '''%(par))

Flow('dens','velC','math output="1"')

#================================================================================

# Individual receiver coordinates and CIG coordinates 
for i in range(par['nz']):
    fdmod.point('r-%03d'%i,7,i*par['dz'],par)
    Plot('r-%03d'%i,fdmod.rrplot('plotfat=15',par))

    fdmod.point('e-%03d'%i,4,i*par['dz'],par)
    Plot('e-%03d'%i,fdmod.rrplot(' plotcol=5 plotfat=15',par))

REC=range(par['nz'])

Flow('rall',map(lambda x:'r-%03d'%x,REC),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(REC))
Flow('eall',map(lambda x:'e-%03d'%x,REC),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(REC))


# Plot receivers
Plot('rall', fdmod.ssplot(' plotfat=5',par))

#Plot cig location
Plot('eall', fdmod.ssplot('plotcol=5 plotfat=5',par))
    
# Individual shot coordinates
for i in range(0,par['nz'],20):
    fdmod.point('s-%03d'%i,1,i*par['dz'],par)
    Plot('s-%03d'%i,fdmod.ssplot('plotfat=15',par))

SHOTS=range(0,par['nz'],20)
Flow('sall',map(lambda x:'s-%03d'%x,SHOTS),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(SHOTS))

#Plot shot coord
Plot('sall', fdmod.ssplot('plotcol=4 plotfat=5',par))

#================================================================================
#                     Generate reference data with correct model
#================================================================================


for i in SHOTS:
    stag='-%03d'%i
    fdmod.awefd('dC'+stag,'swfl'+stag,'wav','velC','dens','s'+stag,'rall','free=n  jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)

    fdmod.awefd_rwfl('rwfl'+stag,'dC'+stag,'velC','dens','rall','rall','free=n  jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)


    Flow('cics'+stag,['swfl'+stag,'rwfl'+stag],
      '''
      xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
      ''' % par)


    


Flow('velI','velC','math output="input*1.2 "')


Result('vels',['velC','velI'],
'''cat axis=3 ${SOURCES[1]} |transp plane=23| window n3=1|
   graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
   plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
   parallel2=n wherexlabel=t  min2=1.5 max2=3.5 d2tic=0.5 
   labelsz=6 labelfat=3 titlesz=12 titlefat=3
    '''%(par))



# Case 1: 1 shot, 1 eic, 1 receiver
SHOT_cases= [0,80,120]
EIC_cases= [69]
REC_cases= [14,59,121]


for s in SHOT_cases:
    stag='-%03d'%s

    for e in EIC_cases:
        etag='-%03d'%e

        for r in REC_cases:
            rtag='-%03d'%r

            wfltag='wfl_s'+stag+'_e'+etag+'_r'+rtag
        

            Flow('dC_'+'s'+stag+'_r'+rtag,'dC'+stag,'window n1=1 f1=%d |transp plane=12'%r)
            ############# correct image with 1 shot 1 receiver

            fdmod.awefd_swfl('corr_s'+wfltag,'wav','velC','dens','s'+stag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
            fdmod.awefd_rwfl('corr_r'+wfltag,'dC_'+'s'+stag+'_r'+rtag,'velC','dens','r'+stag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
          

            Flow('corr_cic_s'+stag+'_e'+etag+'_r'+rtag,['corr_s'+wfltag,'corr_r'+wfltag],
              '''
              xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
              ''' % par)

            








            # Source wfld
            fdmod.awefd_swfl('s'+wfltag,'wav','velI','dens','s'+stag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)


            # Receiver wfld
            fdmod.awefd_rwfl('r'+wfltag,'dC_'+'s'+stag+'_r'+rtag,'velI','dens','r'+stag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)

            # conventional imaging condition
            Flow('cic_s'+stag+'_e'+etag+'_r'+rtag,['s'+wfltag,'r'+wfltag],
              '''
              xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
              ''' % par)

            Result('cic_s'+stag+'_e'+etag+'_r'+rtag, fdmod.cgrey(' ',par))

            # time-lag gathers
            wemig.eic('cig_s'+stag+'_e'+etag+'_r'+rtag,'s'+wfltag,'r'+wfltag,'e'+etag,'nhx=0 nhz=0 |window squeeze=y',par)

            # Penalized time-lag gathers
            Flow('pen_'+'cig_s'+stag+'_e'+etag+'_r'+rtag,'cig_s'+stag+'_e'+etag+'_r'+rtag,
                'math output="abs(x1)^2 * input "')

            
            
            Result('pen-cig_s'+stag+'_e'+etag+'_r'+rtag,['cig_s'+stag+'_e'+etag+'_r'+rtag,'pen_cig_s'+stag+'_e'+etag+'_r'+rtag],
                ''' 
                cat ${SOURCES[1]} axis=2|scale axis=123| '''+grapht('',par))
                


            #Adjoint source, source side
            Flow('adj_sou_'+wfltag,['r'+wfltag,'pen_'+'cig_s'+stag+'_e'+etag+'_r'+rtag,'e'+etag,'wav_'],
                '''
                 ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=1 verb=1 |
                  sinc pattern=${SOURCES[3]}|transp plane=12 
                ''')
            # Adjoint source wavefield
            fdmod.awefd_rwfl('adj_s'+wfltag,'adj_sou_'+wfltag,'velI','dens','e'+etag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
        
            

            # Adjoint source receiver side
            Flow('adj_rec_'+wfltag,['s'+wfltag,'pen_'+'cig_s'+stag+'_e'+etag+'_r'+rtag,'e'+etag,'wav_'],
                '''
                 ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=0 verb=1 |
                 sinc pattern=${SOURCES[3]}|transp plane=12 
                ''')



            Result('adj_srcs_s'+stag+'_e'+etag+'_r'+rtag,['adj_rec_'+wfltag,'adj_sou_'+wfltag],
                 '''
                cat ${SOURCES[1]} axis=1|scale axis=123| transp plane=12| '''+grapht('label1="t"',par))


            # Adjoint receiver wavefield
            fdmod.awefd_swfl('adj_r'+wfltag,'adj_rec_'+wfltag,'velI','dens','e'+etag,'r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
        

            # Data gradient
            Flow('sgrad_s'+stag+'_e'+etag+'_r'+rtag,['s'+wfltag,'adj_s'+wfltag],
                '''
                 xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
                ''')
            Plot('sgrad_s'+stag+'_e'+etag+'_r'+rtag, fdmod.cgrey(' ',par))
            Result('sgrad_s'+stag+'_e'+etag+'_r'+rtag,['sgrad_s'+stag+'_e'+etag+'_r'+rtag,'r'+rtag,'s'+stag,'e'+etag],'Overlay')

            Flow('rgrad_s'+stag+'_e'+etag+'_r'+rtag,['r'+wfltag,'adj_r'+wfltag],
                '''
                 xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
                ''')
            Plot('rgrad_s'+stag+'_e'+etag+'_r'+rtag, fdmod.cgrey(' ',par))


            Result('rgrad_s'+stag+'_e'+etag+'_r'+rtag,['rgrad_s'+stag+'_e'+etag+'_r'+rtag,'r'+rtag,'s'+stag,'e'+etag],'Overlay')




End()
