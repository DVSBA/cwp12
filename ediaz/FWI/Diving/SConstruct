# 
from rsf.proj import *
import fdmod,adcig,encode,wemig,math
import commands, os,numpy



def grapht(custom,par):
    return '''
    graph label2="" title="" n2tic=0 
    label1="\F10 t \F3 " unit1="s" screenratio=0.3 screenht=4 yll=2
    labelsz=6 labelfat=3 titlesz=12 plotfat=7 
    %s
    '''%custom



par = {
    'nt':4001, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':275 , 'dx':0.030 , 'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.030 , 'oy':0, 'ly':'y', 'uy':'km',
    'nz':125,  'dz':0.030 , 'oz':0, 'lz':'z', 'uz':'km',
    'kt':150,
    'nb':150,
    'jsnap_gr':25,
    'jwfld':5
    }
fdmod.param(par)
# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=5
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source

# ------------------------------------------------------------
# receivers

# ------------------------------------------------------------
# CIGs at uniformly-sampled locations
# ------------------------------------------------------------

# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=100
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',8,par)
Flow(  'wav', 'wav_','transp')

Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=100
par['xl']=par['nx']-100

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=30 repeat=50
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

#================================================================================
Flow('velC',None,
    '''
    spike nsp=1 mag=1.0
    n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=1 l1=%(nz)d |
    spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
    add add=1 |
    put label1=%(lz)s unit1=%(uz)s label2=%(lx)s unit2=%(ux)s
    '''%(par))

Flow('dens','velC','math output="1"')

#================================================================================

# Individual receiver coordinates and CIG coordinates 
for i in range(par['nz']):
    fdmod.point('r-%03d'%i,7,i*par['dz'],par)
    Plot('r-%03d'%i,fdmod.rrplot('plotfat=15',par))

    fdmod.point('e-%03d'%i,4,i*par['dz'],par)
    Plot('e-%03d'%i,fdmod.rrplot(' plotcol=5 plotfat=15',par))

REC=range(par['nz'])

Flow('rall',map(lambda x:'r-%03d'%x,REC),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(REC))
Flow('eall',map(lambda x:'e-%03d'%x,REC),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(REC))


# Plot receivers
Plot('rall', fdmod.ssplot(' plotfat=5',par))

#Plot cig location
Plot('eall', fdmod.ssplot('plotcol=5 plotfat=5',par))
    
# Individual shot coordinates
for i in range(0,par['nz'],20):
    fdmod.point('s-%03d'%i,1,i*par['dz'],par)
    Plot('s-%03d'%i,fdmod.ssplot('plotfat=15',par))

SHOTS=range(0,par['nz'],20)
Flow('sall',map(lambda x:'s-%03d'%x,SHOTS),'rcat axis=2 space=n ${SOURCES[1:%s]}'%len(SHOTS))

#Plot shot coord
Plot('sall', fdmod.ssplot('plotcol=4 plotfat=5',par))

#================================================================================
#                     Generate reference data with correct model
#================================================================================


for i in SHOTS:
    stag='-%03d'%i
    fdmod.awefd('dCtmp'+stag,'swfl'+stag,'wav','velC','dens','s'+stag,'rall','free=n  jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)

    Flow('dC'+stag,'dCtmp'+stag,'scale axis=123')

    fdmod.awefd_rwfl('rwfl'+stag,'dC'+stag,'velC','dens','rall','free=n  jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)


    Flow('cics'+stag,['swfl'+stag,'rwfl'+stag],
      '''
      xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
      ''' % par)


    


Flow('velI','velC','math output="input*1.1 "')


<<<<<<< HEAD
Result('vels',['velC','velI'],
'''cat axis=3 ${SOURCES[1]} |transp plane=23| window n3=1|
   graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
   plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
   parallel2=n wherexlabel=t  min2=1.5 max2=3.5 d2tic=0.5 
   labelsz=6 labelfat=3 titlesz=12 titlefat=3
    '''%(par))



# Case 1: 1 shot, 1 eic, 1 receiver
SHOT_cases = [0,80,120]
EIC_cases  = [69]
REC_cases  = [14,59,121]
=======
fdmod.point('xx1',11.5,7,par)


Flow('gg2','velS',
     'window j2=200| rtoc| math  output="x2 +I*x1" |put n1=2 n2=%d >$TARGETS'%(par['nz']*(int(par['nx']/200)+1))+' ; echo type=float >>$TARGETS; echo esize=4 >> $TARGETS ; echo data_format="native_float" >>$TARGETS ; echo ""', stdout=0)
Plot('gg2',fdmod.rrplot('',par))
>>>>>>> …

ncases=len(SHOT_cases)*len(EIC_cases)*len(REC_cases)

<<<<<<< HEAD
cases= numpy.zeros((ncases,3))
i=0
for s in SHOT_cases:
    for e in EIC_cases:
        for r in REC_cases:
            cases[i][0]=s
            cases[i][1]=e
            cases[i][2]=r
            print i
            i+=1
=======
#VELS=[x * 0.1 +0.8 for x in range(0, 5)]
VELS=[x * 0.1 +1.2 for x in range(1)]
#VELS2=[int((x * 0.1 +0.8)*100) for x in range(0, 5)]
VELS2=[int((x * 0.1 +1.2)*100) for x in range(1)]
>>>>>>> …






for c in range(ncases):
    s=cases[c][0]
    e=cases[c][1]
    r=cases[c][2]

    stag='-%03d'%s
    etag='-%03d'%e
    rtag='-%03d'%r


    m='-%02d'%c

<<<<<<< HEAD


    Flow('dC'+m,'dC'+stag,'window n1=1 f1=%d |transp plane=12'%r)
=======
        fdmod.awefd('junk'+stag+veltag,'raS'+stag+veltag,'ain'+stag+veltag,'velS'+veltag,'dens','rr','rr','free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
>>>>>>> …

    # Source wfld
    fdmod.awefd_swfl('us'+m,'wav','velI','dens','s'+stag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)


<<<<<<< HEAD
    # Receiver wfld
    fdmod.awefd_rwfl('ur'+m,'dC'+m,'velI','dens','r'+rtag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
    
    # conventional imaging condition
    Flow('cic'+m,['us'+m,'ur'+m],
      '''
      xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
      ''' % par)
=======
        # extended imaging condition:  time-lag gathers  and space-lag gathers    
        wemig.eic('cig'+stag+veltag,'uS'+stag+veltag,'aS'+stag+veltag,'xx1','nhx=0 nhz=0 |window squeeze=y',par)





        # Penalized time-lag gathers
        Flow('pen_cig'+stag+veltag,'cig'+stag+veltag,'math output="input*abs(x1)" ')


        # Adjoint source, source side

        Flow('adj_src_swfl'+stag+veltag,['uS'+stag+veltag,'pen_cig'+stag+veltag,'xx1','wav_'],
            '''
            ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=1 verb=0 |
            sfreverse which=1 opt=i  | sinc pattern=${SOURCES[3]}|transp plane=12 
            ''')



        # reversed adjoint source wavefield
  
        fdmod.awefd('junk2'+stag+veltag,'rsauS'+stag+veltag,'adj_src_swfl'+stag+veltag,'velS'+veltag,'dens','xx1','rr','free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)

        # adjoint source wavefield
        Flow('sauS'+stag+veltag,'rsauS'+stag+veltag,'window n1=%(nz)d min1=%(oz)g | window n2=%(nx)d min2=%(ox)g | reverse which=4 opt=i '%par)




        # Adjoint source, receiver side

        Flow('adj_src_rwfl'+stag+veltag,['aS'+stag+veltag,'pen_cig'+stag+veltag,'xx1','wav_'],
            '''
            ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=0 verb=0 |
            sinc pattern=${SOURCES[3]}|transp plane=12 
            ''')

        
        fdmod.awefd('junk3'+stag+veltag,'rauS'+stag+veltag,'adj_src_rwfl'+stag+veltag,'velS'+veltag,'dens','xx1','rr','free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)



        #Build the gradient:

        
        # ------------------------------------------------------------
        # data gradient
        Flow('sgrad'+stag+veltag,['sauS'+stag+veltag,'uS'+stag+veltag],
         '''
         xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
         ''' % par)

        # ------------------------------------------------------------
        # data gradient
        Flow('rgrad'+stag+veltag,['rauS'+stag+veltag,'aS'+stag+veltag],
         '''
         xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=100
         ''' % par)




>>>>>>> …

    Result('cic'+m, fdmod.cgrey(' ',par))

    # time-lag gathers
    wemig.eic('cig'+m,'us'+m,'ur'+m,'e'+etag,'nhx=0 nhz=0 |window squeeze=y',par)
    
    # Penalized time-lag gathers
    Flow('pen_cig'+m,'cig'+m,
        'math output="abs(x1)^2 * input "')

    Result('pen_cig'+m,['cig'+m,'pen_cig'+m],
        ''' 
         cat ${SOURCES[1]} axis=2|scale axis=123| '''+grapht('',par))
  
    #Adjoint source, source side
    Flow('adjs_s'+m,['ur'+m,'pen_cig'+m,'e'+etag,'wav_'],
     '''
      ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=1 verb=1 |
       sinc pattern=${SOURCES[3]}|transp plane=12 
     ''')

    # Adjoint source wavefield
    fdmod.awefd_rwfl('as'+m,'adjs_s'+m,'velI','dens','e'+etag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
 


    # Adjoint source receiver side
    Flow('adjs_r'+m,['us'+m,'pen_cig'+m,'e'+etag,'wav_'],
        '''
         ./sfadjsrc_mva.exe eic=${SOURCES[1]} coord=${SOURCES[2]} source=0 verb=1 |
         sinc pattern=${SOURCES[3]}|transp plane=12 
        ''')
    # Adjoint receiver wavefield
    fdmod.awefd_swfl('ar'+m,'adjs_r'+m,'velI','dens','e'+etag,'free=n jsnap=%(jwfld)d'%par+fdmod.qqbox2d(par),par)
 

    Flow('grad'+m,['us'+m,'as'+m,'ur'+m,'ar'+m],
        '''
        math us=${SOURCES[0]} as=${SOURCES[1]} ur=${SOURCES[2]} ar=${SOURCES[3]}
        output="us*as +ur*ar" |
        stack axis=3 norm=n
        ''')


    Plot('grad'+m,fdmod.cgrey('',par))


    Result('grad'+m,['grad'+m,'s'+stag,'e'+etag,'r'+rtag],'Overlay')




End()
