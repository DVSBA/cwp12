# 
from rsf.proj import *
import fdmod,adcig,encode,wemig,math
import commands

par = {
    'nt':3001, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':1000, 'dx':0.01,  'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.01,  'oy':0, 'ly':'y', 'uy':'km',
    'nz':600,  'dz':0.005, 'oz':0, 'lz':'z', 'uz':'km',
    'kt':150,
    'nb':150,
    'jsnap_gr':25,
    'jsou':30, 'nsou':30, 'osou':0.0
    }
fdmod.param(par)
# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=100
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source
# ------------------------------------------------------------
# CIGs at uniformly-sampled locations
fdmod.boxarray('gt',
               par['nz'],par['oz'],par['dz'],
               par['nx'],par['ox'],par['dx'],
               par)
Flow('gg','gt',
     'put n2=%(nz)d n3=%(nx)d | window j3=%(jcx)d |'%par + 
     'put n2=%d n3=1'% (par['nz']*par['nx']/par['jcx'])) 


Plot('gg',fdmod.qqplot('',par))

fdmod.vertical('ggone',par['xsou'],par)
Plot('ggone',fdmod.qqplot('',par))
# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=100
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)


# ------------------------------------------------------------
# receivers
fdmod.horizontal('rr',0,par)
Plot('rr',fdmod.rrplot('',par))



Flow('ss','rr','window j2=%(jsou)d'%par)
Plot('ss',fdmod.ssplot('',par))


# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',12,par)
Flow(  'wav', 'wav_','transp')

Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=200
par['xl']=par['nx']-par['xk']

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=50 repeat=50
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

# ------------------------------------------------------------
# reflectors
zo=300
perc=0.75
perc_inc=0.05

par['perc']=perc
par['perc_inc']=perc_inc

nvels=11

for i in range(nvels):
# ------------------------------------------------------------
# CIPs
     par['zi']=math.floor(zo*par['perc'])
     print i, par['zi']
     tag='%02d'%i
     
     fdmod.horizontal('ct'+tag,par['zi']*par['dz'],par)
     Flow('cc'+tag,'ct'+tag,'window j2=%(jcx)d'%par)
     Plot('cc'+tag,   fdmod.qqplot('plotcol=5 plotfat=10',par))

     Flow('den'+tag,None,
         '''
         spike nsp=1 mag=1.0
         n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(zi)d l1=%(nz)d |
         spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
         add add=1
         ''' % (par))
     Flow('vel'+tag,'den'+tag,
        '''
        math output="%(perc)f*(2.2*(2-input) ) +(input-1)*(3.5) " |
        math output="input +%(perc)f*0.5*(exp(-(x1-0.5)^2/(2*0.25) -(x2-3.75)^2/(2*0.25)))" |
        math  output="input +%(perc)f*-0.5*(exp(-(x1-0.5)^2/(2*0.25) -(x2-6.25)^2/(2*0.25)))" 
        '''%par)

     Flow('vel-const'+tag,'den'+tag,'math output="%(perc)f*(2.2 +input*0 )"'%( par))
     par['perc'] = par['perc'] + par['perc_inc']
     Result('vel'+tag,fdmod.cgrey('allpos=y pclip=100 bias=1.8 color=j',par))







Flow('zer','den00','math output="1.0"')
Flow('vc','den00','math output="2.2"')


for i in range(nvels):
     tag='%02d'%i 
     Plot('den'+tag,fdmod.cgrey('pclip=100 bias=1',par))
     Plot('vel'+tag,fdmod.cgrey('allpos=y pclip=100 bias=1.8 color=j',par))



Plot('zer',fdmod.cgrey('pclip=100 bias=1',par))




vel2mig=[2,5,8]




vel_dat=[5]

#Generate data loop

for i in vel_dat:
    k='%02d'%i
    tag=k
    vel='vel'+k
   
    for s in range(par['nsou']):
        ws= (s)*par['jsou']*par['dx'] + par['osou']
        stag="%02d"%(s)
        print s,ws 

        fdmod.point('ss'+stag,ws , 0.0,par)
        wemig.fWRawe('wav','wtsdat'+k+'_'+stag,vel,'zer','ss'+stag,'jdata=4 jsnap=4 ',par)

        Flow('data'+k+'_'+stag,['wtsdat'+k+'_'+stag,'dmask'],
         '''
         window n1=1 f1=0 | 
         transp |
         mutter x0=%g v0=4.5 t0=0.3 | 
         bandpass flo=3.0 |
         sinc d1=%g n1=%d o1=%g|
         transp | add mode=p ${SOURCES[1]}
         '''%(ws,par['dt'],par['nt'],par['ot']) )

        Result('data'+k+'_'+stag,'transp|'+fdmod.dgrey('pclip=99.9',par))















#Migrate and propagate backward flow with different errors
for i in vel2mig:
    k='%02d'%i
    tag=k
    # migration (RTM)
    vel='vel'+k

    xx=''
    for s in range(par['nsou']):
         ws= (s)*par['jsou']*par['dx'] + par['osou']
         stag="%02d"%(s)

         wemig.fWRawe('wav','wts'+k+'_'+stag,vel,'zer','ss'+stag,'jdata=4 jsnap=4 ',par)
                  
         wemig.bWRawe('data05_'+stag,'wtr'+k+'_'+stag,vel,'zer','rr','jdata=4 jsnap=4 ',par)

         # Image
         wemig.cic('img'+k+'_'+stag,'wts'+k+'_'+stag,'wtr'+k+'_'+stag,'nbuf=100 ',par)
         # Time-lag gather
         wemig.eic('cigt'+k+'_'+stag,'wts'+k+'_'+stag,'wtr'+k+'_'+stag,'gg','nhx=0 nhz=0 ',par)
         # Space-lag gather (lamda x)
         wemig.eic('cigx'+k+'_'+stag,'wts'+k+'_'+stag,'wtr'+k+'_'+stag,'gg','nht=0 nhz=0 ',par)
         xx=xx+' %s'%stag
    c=xx.split()
    Flow('img'+k,map(lambda x:'img'+k+'_%s'%x, c),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3 norm=n'%par['nsou'])
    Result('img'+k,fdmod.cgrey('',par))     
         



