# 
from rsf.proj import *
import fdmod,adcig,encode,wemig,math
import commands,pplot

par = {
    'nt':3001, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':1000, 'dx':0.01,  'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.01,  'oy':0, 'ly':'y', 'uy':'km',
    'nz':300,  'dz':0.01, 'oz':0, 'lz':'z', 'uz':'km',
    'kt':150,
    'nb':150,
    'jsnap_gr':25
    }
fdmod.param(par)
# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=5
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source
fdmod.point('ss',par['xsou'],par['zsou'],par)
fdmod.horizontal('ttall',par['oz'],par)
Flow('ssall','ttall','window j2=%(jcx)d'%par)
Plot('ss',   fdmod.ssplot('',par))
Plot('ssall',fdmod.ssplot('',par))

# ------------------------------------------------------------
# receivers
fdmod.horizontal('rr',0,par)
Plot('rr',fdmod.rrplot('',par))

# ------------------------------------------------------------
# CIGs at uniformly-sampled locations
fdmod.boxarray('gt',
               par['nz'],par['oz'],par['dz'],
               par['nx'],par['ox'],par['dx'],
               par)
Flow('gg','gt',
     'put n2=%(nz)d n3=%(nx)d | window j3=%(jcx)d |'%par + 
     'put n2=%d n3=1'% (par['nz']*par['nx']/par['jcx']) )
fdmod.vertical('ggone',par['xsou'],par)
Plot('ggone',fdmod.qqplot('',par))

Flow('gg80','gg','put n2=%d n3=%d |window n3=1 f3=79'%(par['nz'],par['ncx']))
Plot('gg80',fdmod.qqplot('',par))

Flow('gg124','gg','put n2=%d n3=%d |window n3=1 f3=123'%(par['nz'],par['ncx']))
Plot('gg124',fdmod.qqplot('',par))

# ------------------------------------------------------------

# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=100
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',12,par)
Flow(  'wav', 'wav_','transp')

Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=150
par['xl']=par['nx']-par['xk']

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=50  repeat=10
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

# ------------------------------------------------------------
# reflectors
zo=150
perc=0.85
perc_inc=0.03

par['perc']=perc
par['perc_inc']=perc_inc

nvels=11

vels=''
for i in range(nvels):
# ------------------------------------------------------------
# CIPs
     par['zi']=math.floor(zo*par['perc'])
     tag='%02d'%i
     
     fdmod.horizontal('ct'+tag,par['zi']*par['dz'],par)
     Flow('cc'+tag,'ct'+tag,'window j2=%(jcx)d'%par)
     Plot('cc'+tag,   fdmod.qqplot('plotcol=5 plotfat=10',par))

     Flow('den'+tag,None,
         '''
         spike nsp=1 mag=1.0
         n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(zi)d l1=%(nz)d |
         spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
         add add=1
         ''' % (par))
     Flow('vel'+tag,'den'+tag,'math output="%(perc)f*(2.2*(2-input) ) +(input-1)*(3.5) "'%( par))
     Flow('vel-const'+tag,'den'+tag,'math output="%(perc)f*(2.2 +input*0 )"'%( par))
     par['perc'] = par['perc'] + par['perc_inc']
     vels=vels+'vel'+tag+'.rsf '



for i in range(nvels):
# ------------------------------------------------------------
# CIPs
     par['zi']=math.floor(zo*par['perc'])
     tag='%02d'%i
     
     Flow('denZ'+tag,['vel'+tag],
         '''
         math  output="5/input"
         ''' % (par))

     Plot('denZ'+tag,fdmod.cgrey('pclip=100 bias=1',par))
     Flow('den-const'+tag,'den'+tag,'math output="5/(%(perc)f*(2.2 +input*0 ))"'%( par))
    
     Flow('Z'+tag,['denZ'+tag,'vel'+tag],'add mode=p ${SOURCES[1]}')

     par['perc'] = par['perc'] + par['perc_inc']














Flow('zer','den00','math output="1.0"')
Flow('vc','den00','math output="2.2"')


for i in range(nvels):
     tag='%02d'%i 
     Plot('den'+tag,fdmod.cgrey('pclip=100 bias=1',par))
     Plot('vel'+tag,fdmod.cgrey('allpos=y pclip=100 bias=1.8 color=j',par))

     for j in (['vel','den']):
          Result(j+tag,[j+tag,'rr','ggone','ssall'],'Overlay')


Plot('zer',fdmod.cgrey('pclip=100 bias=1',par))
Result('zer',['zer','rr','ggone','ssall'],'Overlay')



# 1D plot of the velocity model:
par['vels']=vels
Result('vel1d',None,
    '''
	cat %(vels)s  axis=3 |
        stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g min2=1.5 max2=3.5 d2tic=0.5 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3
    '''%(par))


Result('vel1d-dash',None,
    '''
	cat %(vels)s  axis=3 |
        stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g  plotfat=2 plotcol=7 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3 min2=1.5 max2=3.5 d2tic=0.5 
    '''%(par))


for i in range(nvels):
     tag='%02d'%i 
     Plot('vel'+tag+'-fat','vel'+tag,
     '''
	stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel
	screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
	plotfat=12 min2=1.5 max2=3.5 d2tic=0.5 wantaxis=n 
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3
     '''%par)
     Result('vel'+tag+'-fat',['Fig/vel1d-dash','vel'+tag+'-fat'],'Overlay')

# ------------------------------------------------------------
# FD modeling to get data




fdmod.awefd2d('dd','wd','wav','vel05','den-const05','ss','rr','',par)
fdmod.awefd2d('do','wo','wav','vc','den-const05', 'ss','rr','',par)

Flow('dat',['dd','do','dmask'],
     '''
     add scale=+1,-1 ${SOURCES[1]} |
     add mode=p      ${SOURCES[2]} |
     transp |
     bandpass flo=0.5|
     transp
     ''')

Flow('wfl',['wd','wo'],
     'add scale=+1,-1 ${SOURCES[1]}')

Result('dd','transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
Result('do','transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
Result('dat','transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
Result('wfl',             fdmod.wgrey('pclip=99.9',par))

Flow('dts','wav','window squeeze=n')
Flow('dtr','dat','window squeeze=n')


images=''
cits=''
cips=''
citxs=''

for i in range(nvels):
    k='%02d'%i
    tag=k
    # migration (RTM)
    vel='vel'+k
    den='den'+k
    images=images+' img'+k+'.rsf'
    cits= cits +' cit'+k+'.rsf'
    cips= cips + ' cip'+k+'.rsf'
    citxs= citxs +' citx'+k+'.rsf' 



    wemig.fWRawe('dts','wts-b'+k,vel,den,'ss','jdata=4 jsnap=4 ',par)
    wemig.fWRawe('dts','wts-n'+k,'vel-const'+k,'den-const'+k,'ss','jdata=4 jsnap=4 ',par)

    wemig.bWRawe('dtr','wtr-b'+k,vel,den,'rr','jdata=4 jsnap=4 ',par)
    wemig.bWRawe('dtr','wtr-n'+k,'vel-const'+k,'den-const'+k,'rr','jdata=4 jsnap=4 ',par)


    Flow('mask'+tag,'vel'+tag,'clip2 lower=3 | math output="(input-3)*2"|smooth rect1=10 |spray axis=3 n=751 o=0 d=0.004')
    
    Flow ('ur_b'+tag, ['wtr-b'+tag,'wtr-n'+tag,'mask'+tag],'add ${SOURCES[1]} scale=1,-1|math m=${SOURCES[2]} output="(1-m)*input"' )  
    Flow ('ur_n'+tag, ['wtr-b'+tag,'ur_b'+tag],'add ${SOURCES[1]} scale=1,-1')  

    Flow ('us_b'+tag, ['wts-b'+tag,'wts-n'+tag,'mask'+tag],'add ${SOURCES[1]} scale=1,-1|math m=${SOURCES[2]} output="(1-m)*input"' )  
    Flow ('us_n'+tag, ['wts-b'+tag,'us_b'+tag],'add ${SOURCES[1]} scale=1,-1')   


 
    Flow('cc2'+k,'cc'+k,'window j=2 ')


    for cases in ['b b','b n','n b','n n']:
        words=cases.split()
        s=words[0]
        r=words[1]
        wemig.cic('img'+k+'_'+s+r,'us_'+s+k,'ur_'+r+k,'nbuf=100 ',par)
        wemig.eic('cig'+k+'_'+s+r,'us_'+s+k,'ur_'+r+k,'gg','nhx=0 nhz=0 ',par)
        wemig.eic('cigx'+k+'_'+s+r,'us_'+s+k,'ur_'+r+k,'gg','nht=0 nhz=0 ',par)
        wemig.eic('Cip'+k+'_'+s+r,'us_'+s+k,'ur_'+r+k,'cc2'+k,'|stack norm=n axis=4',par)

        Flow('citx'+k+'_'+s+r,
           'cigx'+k+'_'+s+r,
           '''
           put n4=%d n5=%d label4=z label5=c |
           window |
           stack axis=3 norm=n| transp
           '''%(par['nz'],par['nx']/par['jcx'])
        )

        Flow('cit'+k+'_'+s+r,
           'cig'+k+'_'+s+r,
           '''
           put n4=%d n5=%d label4=z label5=c |
           window |
           stack axis=3 norm=n | transp
           '''%(par['nz'],par['nx']/par['jcx'])
        )
 
        Flow('citx124-'+k+'_'+s+r,
         'cigx'+k+'_'+s+r,
         '''
         put n4=%d n5=%d label4=z label5=c |
         window |
         window f3=123 n3=1 |
          transp
         '''%(par['nz'],par['nx']/par['jcx'])
        )
        Flow('cit124-'+k+'_'+s+r,
         'cig'+k+'_'+s+r,
         '''
         put n4=%d n5=%d label4=z label5=c |
         window |
         window f3=123 n3=1 |
          transp
         '''%(par['nz'],par['nx']/par['jcx'])
        )


wemig.cic('img05const','wts-n05','wtr-n05','nbuf=100 ',par)

#-----------------------------------------------------------------------------
#      example of wavefield separation.
#-----------------------------------------------------------------------------

Flow('wts-b05_ex','wts-b05','window n3=1 f3=300')
Result('wts-b05_ex','wts-b05_ex',fdmod.cgrey('',par))

Flow('wts-n05_ex','wts-n05','window n3=1 f3=300')
Result('wts-n05_ex','wts-n05_ex',fdmod.cgrey('',par))

Flow('mask05_ex','mask05','window n3=1 f3=300')
Result('mask05_ex','mask05_ex',fdmod.cgrey('',par))



Flow('us_b05_ex',['wts-b05_ex','wts-n05_ex','mask05_ex'],'add ${SOURCES[1]} scale=1,-1|math m=${SOURCES[2]} output="(1-m)*input"')

Result('us_b05_ex','us_b05_ex',fdmod.cgrey('',par))

Flow('us_n05_ex',['wts-b05_ex','us_b05_ex'],'add ${SOURCES[1]} scale=1,-1')   
Result('us_n05_ex','us_n05_ex',fdmod.cgrey('',par))








#-----------------------------------------------------------------------------





c=['bb','bn','nb','nn']
c2=['bb','bn','nb','nn','ref']
back=['bn','nb']
xx=''

par['perc'] = 0.85

for j in range(nvels):
     k='%02d'%j
     xx=xx+' %s'%k


     Flow('img'+k+'_ref',map(lambda x:'img'+k+'_%s'%x, c),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3 norm=n'%len(c))
     Flow('cit'+k+'_ref',map(lambda x:'cit'+k+'_%s'%x, c),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3 norm=n'%len(c))
     # CIG
     Flow('citx'+k+'_ref',map(lambda x:'citx'+k+'_%s'%x, c),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3 norm=n'%len(c))
     Flow('cip'+k+'_ref',map(lambda x:'Cip'+k+'_%s'%x, c),'cat axis=4 space=n  ${SOURCES[1:%d]}  |stack axis=4 norm=n'%len(c))

     Flow('img'+k+'_byt',map(lambda x:'img'+k+'_%s'%x, c2),'cat axis=3 space=n  ${SOURCES[1:%d]} |byte gainpanel=a pclip=99.5  '%len(c2))  
     Flow('cit'+k+'_byt',map(lambda x:'cit'+k+'_%s'%x, c2),'cat axis=3 space=n  ${SOURCES[1:%d]}  |byte gainpanel=a pclip=99.8  '%len(c2))  
     Flow('citx'+k+'_byt',map(lambda x:'citx'+k+'_%s'%x, c2),'cat axis=3 space=n  ${SOURCES[1:%d]}|byte gainpanel=a pclip=99.8 '%len(c2))  
     Flow('cip'+k+'_byt',map(lambda x:'cip'+k+'_%s'%x, c2),'cat axis=4 space=n  ${SOURCES[1:%d]}|byte gainpanel=a pclip=100 '%len(c2))  
     i=0
     for cases in ['b b','b n','n b','n n']:
          words=cases.split()
          s=words[0]
          r=words[1]
          
          # image
          Plot(  'img'+k+'_'+s+r,
               'img'+k+'_byt',
               'window n3=1 f3=%d |'%i + fdmod.cgrey('pclip=100',par))
#          fdmod.wframe('img'+k+'_'+s+r, 'img'+k+'_byt',i,' ',par)

          Result('img'+k+'_'+s+r,['img'+k+'_'+s +r,'rr','ssall','ggone'],'Overlay')
     
          # CIG
          Result('cit'+k+'_'+s+r,
                 'cit'+k+'_byt',
                 'window n3=1 f3=%d |'%i + adcig.tgrey('',par))
          
          Result('citx'+k+'_'+s+r,
                 'citx'+k+'_byt',
                 'window n3=1 f3=%d |'%i + adcig.xgrey('',par))

          Result('cip'+k+'_'+s+r,
                 'cip'+k+'_byt',
                 'window n4=1 f4=%d |'%i + adcig.egrey('',par))

          i+=1 



     Plot(  'img'+k+'_ref',
          'img'+k+'_byt',
          'window n3=1 f3=%d |'%(len(c2)-1) + fdmod.cgrey('pclip=99.8',par))
 #    fdmod.wframe('img'+k+'_ref','img'+k+'_byt',len(c2)-1,' ',par)

     Result('img'+k+'_ref',['img'+k+'_ref','rr','ssall','ggone'],'Overlay')

     Result('cit'+k+'_ref',
                 'cit'+k+'_byt',
                 'window n3=1 f3=%d |'%(len(c2)-1) + adcig.tgrey('',par))

     Result('citx'+k+'_ref',
                'citx'+k+'_byt',
                'window n3=1 f3=%d |'%(len(c2)-1) + adcig.xgrey('',par))

     Result('cip'+k+'_ref',
                 'cip'+k+'_byt',
                 'window n4=1 f4=%d |'%(len(c2)-1) + adcig.egrey('',par))

    #################################################################################
    ###################### Let us build the "pure" artifacts ########################
    #################################################################################


     Flow('img'+k+'_back',map(lambda x:'img'+k+'_%s'%x,back),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3'%len(back))
     Flow('cit'+k+'_back',map(lambda x:'cit'+k+'_%s'%x,back),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3'%len(back))
     Flow('citx'+k+'_back',map(lambda x:'citx'+k+'_%s'%x,back),'cat axis=3 space=n  ${SOURCES[1:%d]}  |stack axis=3'%len(back))

     Result('cit'+k+'_back','scale axis=123 |'+  adcig.tgrey('',par))
     Result('citx'+k+'_back','scale axis=123 |'+  adcig.xgrey('',par))

     
     Flow('penal_cit'+k+'_back','cit'+k+'_back','scale axis=123|math output="abs(x2)*input"')
     Flow('penal_cix'+k+'_back','citx'+k+'_back','scale axis=123|math output="abs(x2)*input"')
     Flow('penal_cixv2'+k+'_back','citx'+k+'_back','window f2=25 n2=150 |math output="abs(x2)*input"|pad beg2=25 end2=25')


     par['zi']=math.floor(zo*par['perc'])
     Flow('OF_cix'+k+'_back','penal_cix'+k+'_back','math output="abs(input)"| stack axis=2 norm=n| window n1=%(zi)d |stack axis=1 norm=n '%par)

     Flow('OF_cit'+k+'_back','penal_cit'+k+'_back','math output="abs(input)"| stack axis=2 norm=n|stack axis=1 norm=n ')
     par['perc'] = par['perc'] + par['perc_inc']
     



COF=xx.split()

Flow('OF_cix',map(lambda x:'OF_cix%s_back'%x, COF),'cat axis=1 space=n  ${SOURCES[1:%d]}| put o1=-15 d1=3|scale axis=123 '%nvels)
Flow('OF_cit',map(lambda x:'OF_cit%s_back'%x, COF),'cat axis=1 space=n  ${SOURCES[1:%d]}| put o1=-15 d1=3|scale axis=123 '%nvels)

Result('OF_cix','window n1=9 f1=1 |graph title="" label1="velocity error(%)" label2="J" labelsz=6 parallel2=n labelrot=n labelfat=3 plotfat=16')
Result('OF_cit','window n1=9 f1=1 |graph title="" label1="velocity error(%)" label2="J" labelsz=6 parallel2=n labelrot=n labelfat=3 plotfat=16')
Result('OF_joint',['OF_cix','OF_cit'],
    '''
    add scale=1,1 ${SOURCES[1]} |
    graph title="" label1="velocity error(%)" label2="J(s)" plotfat=16
    ''')






frames= range(0, 625 , par['jsnap_gr'] )

# cases to test in a movie!
for k in ['05']:

#     Result('cip'+k, 'cipbyt', 'window n4=1 f4=%d |'%j + adcig.egrey('',par))
     cases='s-b_r-b'    
     Flow('cross_corr'+cases+k,['wts-b'+k,'wtr-b'+k],'math r=${SOURCES[1]} output="r*input " ')
     Flow('cross_corr'+cases+k,['wts-b'+k,'wtr-b'+k],'math r=${SOURCES[1]} output="r*input " ')
     ## ------------------------------------------------------------ 
     ## plot wavefield frames

     for i in range(0, 625 , par['jsnap_gr'] ):
         tag = '-%03d'%i
         t= i*par['dt']
         rarray='rr'
		   
         #Source wavefield frame
	 fdmod.wframe('wts-b'+k+tag,
	 'wts-b'+k,i,' wheretitle=t title="Ws(%4.3f)" pclip=99'%t,par)
	 fdmod.wframe('awts-b'+k+tag,
	 'wts-b'+k,i,' wheretitle=t pclip=99  labelfat=1',par)
         Result( 'wts-b'+k+tag,
	 ['wts-b'+k+tag,rarray],'Overlay')

         #Receiver wavefield frame
	 fdmod.wframe('wtr-b'+k+tag,
	 'wtr-b'+k,i,' wheretitle=t  title="Wr(%4.3f)" pclip=99'%t,par)
	 fdmod.wframe('awtr-b'+k+tag,
	 'wtr-b'+k,i,'  labelfat=1',par)
	 Result( 'wtr-b'+k+tag,
	 ['wtr-b'+k+tag,rarray],'Overlay')

	 #Cross-corr wavefield frame
	 fdmod.wframe('cross_corr'+cases+k+tag,
	 'cross_corr'+cases+k,i,' wheretitle=t title="Ws*Wr(%4.3f)" pclip=99'%t,par)
	 fdmod.wframe('across_corr'+cases+k+tag,
	 'cross_corr'+cases+k,i,' wheretitle=t pclip=99  labelfat=1',par)
	 Result( 'cross_corr'+cases+k+tag,
         ['cross_corr'+cases+k+tag,rarray],'Overlay')

         #Image so far:
         Flow('img'+cases+k+tag,'cross_corr'+cases+k,
         'window n3=%d| stack axis=3 norm=n '%(i+1))

     Flow('imgsfbyt'+'s-b_r-b'+k,map(lambda x:'img'+'s-b_r-b'+k+'-'+'%03d'%x, frames),'cat axis=3 space=n  ${SOURCES[1:%d]}'%len(frames)) 

     

     j=0
     for i in range(0, 625 , par['jsnap_gr'] ):
         tag = '-%03d'%i
         t= i*par['dt']
         rarray='rr'
         cases='s-b_r-b'

#         fdmod.wframe('img'+cases+k+'_'+tag,
#         'imgsfbyt'+cases+k,j,' wheretitle=t title="Ws*Wr(0-->%4.3f)" pclip=99'%t,par)

         #Plot('img'+cases+k+'_'+tag, 'imgsfbyt'+cases+k, 'window f3=%d n3=1|'%(i)+ fdmod.cgrey('pclip=100',par))
         fdmod.wframe('img'+cases+k+'_'+tag, 'imgsfbyt'+cases+k,j,' wheretitle=t title="Ws*Wr(0-->%4.3f)" pclip=99.8 '%t,par)
         fdmod.wframe('aimg'+cases+k+'_'+tag, 'imgsfbyt'+cases+k,j,' wheretitle=t  pclip=99.8 labelfat=1',par)
         Result( 'img'+cases+k+tag,
         ['img'+cases+k+'_'+tag,'rr'],'Overlay')

         j = j +1
# ------------------------------------------------------------

##############################################################

#Movie snapshots for article:

End()
