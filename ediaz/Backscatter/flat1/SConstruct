# 
from rsf.proj import *
import fdmod,adcig,encode,wemig,math
import commands,pplot



def dummyf(out,name):
    Flow(out,None,'\\rm /var2/ediaz/Backscatter/sigsbee/%s.rsf@; echo x'%name)






par = {
    'nt':4001, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':1000, 'dx':0.01,  'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.01,  'oy':0, 'ly':'y', 'uy':'km',
    'nz':300,  'dz':0.01, 'oz':0, 'lz':'z', 'uz':'km',
    'kt':150,
    'nb':150,
    'jsnap_gr':25
    }
fdmod.param(par)
# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=5
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source
fdmod.point('ss',par['xsou'],par['zsou'],par)
fdmod.point('ss0',1,par['zsou'],par)
fdmod.point('ss1',par['xsou'],par['zsou'],par)
fdmod.point('ss2',9,par['zsou'],par)

fdmod.horizontal('ttall',par['oz'],par)
Flow('ssall','ttall','window j2=%(jcx)d'%par)
Plot('ss',   fdmod.ssplot('',par))
Result('ss0',   fdmod.ssplot('',par))
Result('ss1',   fdmod.ssplot('',par))
Result('ss2',   fdmod.ssplot('',par))
Result('ssall',fdmod.ssplot('',par))

# ------------------------------------------------------------
# receivers
fdmod.horizontal('rr',0,par)
Plot('rr',fdmod.rrplot('',par))

# ------------------------------------------------------------
# CIGs at uniformly-sampled locations
fdmod.boxarray('gt',
               par['nz'],par['oz'],par['dz'],
               par['nx'],par['ox'],par['dx'],
               par)
Flow('gg','gt',
     'put n2=%(nz)d n3=%(nx)d | window j3=%(jcx)d |'%par + 
     'put n2=%d n3=1'% (par['nz']*par['nx']/par['jcx']) )
fdmod.vertical('ggone',par['xsou'],par)
Plot('ggone',fdmod.qqplot('',par))

Flow('gg80','gg','put n2=%d n3=%d |window n3=1 f3=79'%(par['nz'],par['ncx']))
Plot('gg80',fdmod.qqplot('',par))

Flow('gg124','gg','put n2=%d n3=%d |window n3=1 f3=123'%(par['nz'],par['ncx']))
Plot('gg124',fdmod.qqplot('',par))

# ------------------------------------------------------------

# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=100
par['nhz']=par['nhx']
par['nht']=100
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)

# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',12,par)
Flow(  'wav', 'wav_','transp')

Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=150
par['xl']=par['nx']-par['xk']

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=80  repeat=4
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

# ------------------------------------------------------------
# reflectors
zo=150
perc=0.75
perc_inc=0.05

par['perc']=perc
par['perc_inc']=perc_inc

nvels=11

vels=''
for i in range(nvels):
# ------------------------------------------------------------
# CIPs
     par['zi']=math.floor(zo*par['perc'])
     tag='%02d'%i
     
     fdmod.horizontal('ct'+tag,par['zi']*par['dz'],par)
     Flow('cc'+tag,'ct'+tag,'window j2=%(jcx)d'%par)
     Plot('cc'+tag,   fdmod.qqplot('plotcol=5 plotfat=10',par))

     Flow('den'+tag,None,
         '''
         spike nsp=1 mag=1.0
         n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(zi)d l1=%(nz)d |
         spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
         add add=1
         ''' % (par))
     Flow('vel'+tag,'den'+tag,'math output="%(perc)f*(2.2*(2-input) ) +(input-1)*(3.5) "'%( par))
     Flow('vel-const'+tag,'den'+tag,'math output="%(perc)f*(2.2 +input*0 )"'%( par))
     par['perc'] = par['perc'] + par['perc_inc']
     vels=vels+'vel'+tag+'.rsf '


perc_inc=0.05

for i in range(nvels):
# ------------------------------------------------------------
# CIPs
     par['zi']=math.floor(zo*par['perc'])
     tag='%02d'%i
     
     Flow('denZ'+tag,['vel'+tag],
         '''
         math  output="5/input"
         ''' % (par))

     Plot('denZ'+tag,fdmod.cgrey('pclip=100 bias=1',par))
     Flow('den-const'+tag,'den'+tag,'math output="5/(%(perc)f*(2.2 +input*0 ))"'%( par))
    
     Flow('Z'+tag,['denZ'+tag,'vel'+tag],'add mode=p ${SOURCES[1]}')

     par['perc'] = par['perc'] + par['perc_inc']














Flow('zer','den00','math output="1.0"')
Flow('vc','den00','math output="2.2"')



Plot('zer',fdmod.cgrey('pclip=100 bias=1',par))



# 1D plot of the velocity model:
par['vels']=vels
Result('vel1d',None,
    '''
	cat %(vels)s  axis=3 |
        stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g min2=1.5 max2=3.5 d2tic=0.5 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3
    '''%(par))


Result('vel1d-dash',None,
    '''
	cat %(vels)s  axis=3 |
        stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	plotfat=5 screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g  plotfat=2 plotcol=7 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3 min2=1.5 max2=3.5 d2tic=0.5 
    '''%(par))


for i in range(nvels):
     tag='%02d'%i 
     Plot('vel'+tag+'-fat','vel'+tag,
     '''
	stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel
	screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1.1
	plotfat=12 min2=1.5 max2=3.5 d2tic=0.5 wantaxis=n 
        parallel2=n wherexlabel=t min1=%(zmin)g max1=%(zmax)g 
        labelsz=6 labelfat=3 titlesz=12 titlefat=3
     '''%par)
     Result('vel'+tag+'-fat',['Fig/vel1d-dash','vel'+tag+'-fat'],'Overlay')

# ------------------------------------------------------------
# FD modeling to get data

for i in range(3):
    stag='%d'%i
    fdmod.awefd2d('dd'+stag,'wd'+stag,'wav','vel05','denZ05','ss'+stag,'rr','',par)
    fdmod.awefd2d('do'+stag,'wo'+stag,'wav','vc','denZ05', 'ss'+stag,'rr','',par)

    Flow('dat'+stag,['dd'+stag,'do'+stag,'dmask'],
     '''
     add scale=+1,-1 ${SOURCES[1]} |
     add mode=p      ${SOURCES[2]} |
     transp |
     bandpass flo=0.5|
     transp
     ''')

    Flow('dtr'+stag,'dat'+stag,'window squeeze=n')

Flow('dts','wav','window squeeze=n')

images=''
cits=''
cips=''
citxs=''

for i in [5]:
    for s in range(3):
        stag='%d'%s

        k='%02d'%i
        tag=k
        # migration (RTM)
        vel='vel'+k
        den='den'+k



        wemig.fWRawe('dts','wts-b'+stag+k,vel,den,'ss'+stag,'jdata=4 jsnap=4 ',par)
        wemig.fWRawe('dts','wts-n'+stag+k,'vel-const'+k,'den-const'+k,'ss'+stag,'jdata=4 jsnap=4 ',par)

        wemig.bWRawe('dtr'+stag,'wtr-b'+stag+k,vel,den,'rr','jdata=4 jsnap=4 ',par)
        wemig.bWRawe('dtr'+stag,'wtr-n'+stag+k,'vel-const'+k,'den-const'+k,'rr','jdata=4 jsnap=4 ',par)


        Flow('mask'+tag,'vel'+tag,'clip2 lower=3 | math output="(input-3)*2"|smooth rect1=10 |spray axis=3 n=1001 o=0 d=0.004')
    
        Flow ('ur_b'+stag+k, ['wtr-b'+stag+k,'wtr-n'+stag+k,'mask'+tag],'add ${SOURCES[1]} scale=1,-1|math m=${SOURCES[2]} output="(1-m)*input"' )  
        Flow ('ur_n'+stag+k, ['wtr-b'+stag+k,'ur_b'+stag+k],'add ${SOURCES[1]} scale=1,-1')  

        Flow ('us_b'+stag+k, ['wts-b'+stag+k,'wts-n'+stag+k,'mask'+tag],'add ${SOURCES[1]} scale=1,-1|math m=${SOURCES[2]} output="(1-m)*input"' )  
        Flow ('us_n'+stag+k, ['wts-b'+stag+k,'us_b'+stag+k],'add ${SOURCES[1]} scale=1,-1')   


 
        Flow('cc2'+k,'cc'+k,'window j=2 ')


        for cases in ['b b','b n','n b','n n']:
            words=cases.split()
            s=words[0]
            r=words[1]
            wemig.cic('img'+stag+k+'_'+s+r,'us_'+s+stag+k,'ur_'+r+stag+k,'nbuf=100 ',par)
            wemig.eic('cig'+stag+k+'_'+s+r,'us_'+s+stag+k,'ur_'+r+stag+k,'gg','nhx=0 nhz=0 ',par)
            wemig.eic('cigx'+stag+k+'_'+s+r,'us_'+s+stag+k,'ur_'+r+stag+k,'gg','nht=0 nhz=0 ',par)
            wemig.eic('Cipx'+stag+k+'_'+s+r,'us_'+s+stag+k,'ur_'+r+stag+k,'cc2'+k,'',par)

            Flow('citx'+stag+k+'_'+s+r,
               'cigx'+stag+k+'_'+s+r,
               '''
               put n4=%d n5=%d label4=z label5=c |
               window |
               stack axis=3 norm=n| transp
               '''%(par['nz'],par['nx']/par['jcx'])
            )

            Flow('cit'+stag+k+'_'+s+r,
               'cig'+stag+k+'_'+s+r,
               '''
               put n4=%d n5=%d label4=z label5=c |
               window |
               stack axis=3 norm=n | transp
               '''%(par['nz'],par['nx']/par['jcx'])
            )
 
            Flow('citx124-'+stag+k+'_'+s+r,
             'cigx'+stag+k+'_'+s+r,
             '''
             put n4=%d n5=%d label4=z label5=c |
             window |
             window f3=123 n3=1 |
              transp
             '''%(par['nz'],par['nx']/par['jcx'])
            )
            Flow('cit124-'+stag+k+'_'+s+r,
             'cig'+stag+k+'_'+s+r,
             '''
             put n4=%d n5=%d label4=z label5=c |
             window |
             window f3=123 n3=1 |
              transp
             '''%(par['nz'],par['nx']/par['jcx'])
            )

            Flow('cip'+stag+k+'_'+s+r,'Cipx'+stag+k+'_'+s+r,'stack axis=4 norm=n')


        dummyf('log_us_b'+stag+k,'us_b'+stag+k)
        dummyf('log_us_n'+stag+k,'us_n'+stag+k)

        dummyf('log_ur_b'+stag+k,'us_r'+stag+k)
        dummyf('log_ur_n'+stag+k,'us_r'+stag+k)


End()
