# 
from rsf.proj import *
import fdmod,adcig,encode,wemig

par = {
    'nt':2501, 'dt':0.001, 'ot':0, 'lt':'t', 'ut':'s',     
    'nx':1000, 'dx':0.01,  'ox':0, 'lx':'x', 'ux':'km',
    'ny':1,    'dy':0.01,  'oy':0, 'ly':'y', 'uy':'km',
    'nz':700,  'dz':0.005, 'oz':0, 'lz':'z', 'uz':'km',
    'kt':200,
    'nb':100,
    'jsnap_gr':25
    }
fdmod.param(par)

# ------------------------------------------------------------
# source
par['xsou']=par['ox']+par['nx']/2*par['dx']
par['zsou']=par['oz']
par['ixsou']=par['nx']/2
par['izsou']=1

par['jcx']=5
par['ncx']=par['nx']/par['jcx']

# ------------------------------------------------------------
# source
fdmod.point('ss',par['xsou'],par['zsou'],par)
fdmod.horizontal('ttall',par['oz'],par)
Flow('ssall','ttall','window j2=%(jcx)d'%par)
Plot('ss',   fdmod.ssplot('',par))
Plot('ssall',fdmod.ssplot('',par))

# ------------------------------------------------------------
# receivers
#Array @ the surface
fdmod.horizontal('rr0',0,par)
Plot('rr0',fdmod.rrplot('plotfat=8',par))

#Array @ the bottom of the model
fdmod.horizontal('rr1',par['oz']+par['nz']*par['dz'],par)
Plot('rr1',fdmod.rrplot('plotfat=12',par))

#Composite array:
Flow('rr2','rr0 rr1','cat axis=2 space=n ${SOURCES[1]}')
Plot('rr2',fdmod.rrplot('plotfat=12',par))


# ------------------------------------------------------------
# CIGs at uniformly-sampled locations


par['nx_box']= par['nx'] 
par['dx_box']= par['dx'] 


fdmod.boxarray('gt',
               par['nz'],par['oz'],par['dz'],
               par['nx_box'],par['ox'],par['dx_box'],
               par)
Flow('gg','gt',
     'put n2=%(nz)d n3=%(nx_box)d | window j3=%(jcx)d |'%par + 
     'put n2=%d n3=1'% (par['nz']*par['nx_box']/par['jcx']) )


fdmod.vertical('ggone',par['xsou'],par)
Plot('ggone',fdmod.qqplot('',par))

Plot('gg',fdmod.qqplot('',par))

# ------------------------------------------------------------

# ------------------------------------------------------------
# EIC computational domain
par['nhz']=0
par['nhx']=200
par['nht']=200
par['dht']=par['dt']*10

adcig.tparam((par['nhx']*par['dx'])/(par['nht']*par['dt']),
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
               par['nz']   ,            par['oz'],par['dz'],
             par)
			 
adcig.xparam(
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
               par['nz']   ,            par['oz'],par['dz'],
             par)

adcig.eparam(10.0,
             2*par['nhx']+1,-par['nhx']*par['dx'],par['dx'],
             2*par['nhz']+1,-par['nhz']*par['dz'],par['dz'],
             2*par['nht']+1,-par['nht']*par['dt'],par['dt'],
             par)
			 


			 
			 


			 
# ------------------------------------------------------------
# wavelet
fdmod.wavelet('wav_',15,par)
Flow(  'wav', 'wav_','transp')
Result('wav','window n2=500 |'+fdmod.waveplot('',par))

# ------------------------------------------------------------
# data mask
par['xk']=100
par['xl']=par['nx']-100

Flow('dmask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nx)d d1=%(dx)g o1=%(ox)g k1=%(xk)d l1=%(xl)d
     n2=%(nt)d d2=%(dt)g o2=%(ot)g |
     smooth rect1=100
     ''' % par)
Result('dmask','transp |'+fdmod.dgrey('pclip=99 screenratio=1.5',par))

# ------------------------------------------------------------
# reflector
Flow('den0',None,  
     '''
     spike nsp=1 mag=1.0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=401 l1=%(nz)d |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
     add add=1
     ''' % par)
Flow('den1',None,  
     '''
     spike nsp=1 mag=1.0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=350 l1=%(nz)d |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
     add add=1
     ''' % par)

Flow('den2',None,  
     '''
     spike nsp=1 mag=1.0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=432 l1=%(nz)d |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
     add add=1
     ''' % par)




Flow('zer','den0','math output="1.0"')

Flow('veltmp1','den0','math output="2.5+0.5*sin(8*x1)"')

Flow('veltmp2','veltmp1','math output="2*input"')


Flow('vel0',['veltmp1','veltmp2', 'den0'],'math v2=${SOURCES[1]} d=${SOURCES[2]} output="((v2+2)*(d-1)+(input-2)*1)*0.15+2"  ')





Flow('vel1','vel0','math output="0.9*input"')
Flow('vel2','vel0','math output="1.1*input"')

for ra in ['0']:

	for k in (['0','1','2']):
		Plot('den'+k,fdmod.cgrey('pclip=100 bias=1',par))
		Plot('vel'+k,fdmod.cgrey('allpos=y pclip=100 bias=1.8 color=j',par))

		for j in (['vel','den']):
			Result(j+ra+k,[j+k,'rr'+ra,'ggone','ssall'],'Overlay')

# 1D plot of the velocity model:
Result('vel1d',['vel0','vel1','vel2'],
    '''
	cat ${SOURCES[1]} ${SOURCES[2]} axis=3 |
    stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1
	min2=1.5 max2=3.5 
	''')
	
Result('vel1d-dash',['vel0','vel1','vel2'],
    '''
	cat ${SOURCES[1]} ${SOURCES[2]} axis=3 |
    stack axis=2 |
	graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel 
	screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1
	min2=1.5 max2=3.5 dash=3
	''')



for vel in ['vel0','vel1','vel2']:
	Plot(vel+'-fat',[vel,vel],
		'''
		cat ${SOURCES[1]} axis=2 |
		stack axis=2 |
		graph transp=y yreverse=y unit1="km" unit2="km/s" title="" label1=z label2=vel
		screenratio=3 wantscalebar=n labelsz=6 labelfat=3 titlesz=12 titlefat=3 xll=1
		plotfat=12 min2=1.5 max2=3.5 d2tic=0.5 wantaxis=n
		''')
	Result(vel+'-fat',[vel+'-fat','Fig/vel1d-dash'],'Overlay')






# ------------------------------------------------------------
# ------------------------------------------------------------
# ------------------------------------------------------------
# ------------------------------------------------------------
# FD modeling


for ra in ['0']:
	fdmod.awefd2d('dd'+ra,'wd'+ra,'wav','vel0','den0','ss','rr'+ra,'',par)
	fdmod.awefd2d('do'+ra,'wo'+ra,'wav','vel0','zer', 'ss','rr'+ra,'',par)

	if (ra=='0' or ra=='1'):
		Flow('dat'+ra,['dd'+ra,'do'+ra,'dmask'],
			'''
			add scale=+1,-1 ${SOURCES[1]} |
			add mode=p      ${SOURCES[2]}
			''')
	else:
		Flow('dmask2','dmask','cat ${SOURCES[0]} axis=1')
		Flow('dat'+ra,['dd'+ra,'do'+ra,'dmask2'],
			'''
			add scale=+1,-1 ${SOURCES[1]} |
			add mode=p      ${SOURCES[2]}
			''')		

	Flow('wfl'+ra,['wd'+ra,'wo'+ra],
		'add scale=+1,-1 ${SOURCES[1]}')

	Result('dd'+ra ,'transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
	Result('do'+ra ,'transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
	Result('dat'+ra,'transp |' + fdmod.dgrey('pclip=99.9 screenratio=1.5',par))
	Result('wfl'+ra,             fdmod.wgrey('pclip=99.9',par))

	Flow('dts'+ra,'wav','window squeeze=n')
	Flow('dtr'+ra,'dat'+ra,'window squeeze=n')
	
	
	for k in (['0','1','2']):

		# migration (RTM)
	

		# Here I am creating 4 types of wavefields: with backscatter and no backscatter
		# for the source and receiver wavefield respectevly.
		# s: source, r: receiver
		for w in ['s','r']:
	
			#b: backscattered (normal), n: no backscattered i.e. constant density
			for l in ['b','n']:
				den='zer'
				if l== 'b':
					den='den'+k
				if w== 's':
					wemig.fWRawe('dt'+w+ra,'wt'+ra+w+'-'+l+k,'vel'+k,'zer',w+w,'jdata=4 jsnap=4 ',par)
				else :
					wemig.bWRawe('dt'+w+ra,'wt'+ra+w+'-'+l+k,'vel'+k,'zer',w+w+ra,'jdata=4 jsnap=4 ',par)


			



		#Now I am gonna build the illumination maps for source and receiver fields (sillu and rillu)
		for s in ['s-b','s-n']:
			wemig.cic('sillu'+ra+s+k,'wt'+ra+s+k,'wt'+ra+s+k,'nbuf=100',par)

		for s in ['r-b','r-n']:
			wemig.cic('rillu'+ra+s+k,'wt'+ra+s+k,'wt'+ra+s+k,'nbuf=100',par)






		# Now I am going to make all the posible combinations of the wavefields
		# for the images and the time lag gathers.	
	
		for w in ['s-b','s-n']:

			for l in ['r-b','r-n']:
				wemig.cic('img'+ra+w+'_'+l+k,'wt'+ra+w+k,'wt'+ra+l+k,'nbuf=100',par)
				wemig.eic('cig'+ra+w+'_'+l+k,'wt'+ra+w+k,'wt'+ra+l+k,'gg','nhx=0',par)
				wemig.eic('cigx'+ra+w+'_'+l+k,'wt'+ra+w+k,'wt'+ra+l+k,'gg','nht=0',par)			
	
				#By stacking cig at all position I fake one centered position received by many
				# shots in the surface
				Flow('cit'+ra+w+'_'+l+k,
				'cig'+ra+w+'_'+l+k,
				'''
				put n4=%d n5=%d label4=z label5=c |
				window |
				stack axis=3 | transp
				'''%(par['nz'],par['nx_box']/par['jcx'])
				)
				
				Flow('citx'+ra+w+'_'+l+k,
				'cigx'+ra+w+'_'+l+k,
				'''
				put n4=%d n5=%d label4=z label5=c |
				window |
				stack axis=3 | transp
				'''%(par['nz'],par['nx_box']/par['jcx'])
				)

				# Combined illumination map:
				Flow('illu'+ra+w+'_'+l+k,['sillu'+ra+w+k,'rillu'+ra+l+k],
				'''
				add scale=+1,+1 ${SOURCES[1]}
				'''
				)
			


		Flow('cit-diff'+ra+k,['cit'+ra+'s-b_r-b'+k,'cit'+ra+'s-n_r-n'+k],
			'math x=${SOURCES[1]} output="input-x"')


		Flow('citx-diff'+ra+k,['citx'+ra+'s-b_r-b'+k,'citx'+ra+'s-n_r-n'+k],
			'math x=${SOURCES[1]} output="input-x"')
			

		Flow('img-diff'+ra+k,['img'+ra+'s-b_r-b'+k,'img'+ra+'s-n_r-n'+k],
			'math x=${SOURCES[1]} output="input-x"')

	
		#Crosscorr between normal wavefields (both with variable density)
		Flow('cross_corr'+ra+k,['wt'+ra+'s-b'+k,'wt'+ra+'r-b'+k],'math r=${SOURCES[1]} output="r*input" ')
		
	
		Result( 'vel_den'+ra+k,
			['vel'+k,'den'+k],'SideBySideAniso')
	
		## ------------------------------------------------------------ 
		## plot wavefield frames
		for i in range(0, 625 , par['jsnap_gr'] ):
			tag = '-%03d'%i
			t= i*par['dt']
			rarray='rr'+ra
			if(ra==2):
				rarray='rr1,rr2'

			#Source wavefield frame
			fdmod.wframe('wt'+ra+'s-b'+k+tag,
				'wt'+ra+'s-b'+k,i,'pclip=99 wheretitle=t title="Ws(%4.3f)"'%t,par)
			Result( 'wt'+ra+'s-b'+k+tag,
				['wt'+ra+'s-b'+k+tag,rarray],'Overlay')

			#Receiver wavefield frame
			fdmod.wframe('wt'+ra+'r-b'+k+tag,
				'wt'+ra+'r-b'+k,i,'pclip=99 wheretitle=t  title="Wr(%4.3f)"'%t,par)
			Result( 'wt'+ra+'r-b'+k+tag,
				['wt'+ra+'r-b'+k+tag,rarray],'Overlay')

			#Cross-corr wavefield frame
			fdmod.wframe('cross_corr'+ra+k+tag,
				'cross_corr'+ra+k,i,'pclip=99 wheretitle=t title="Ws*Wr(%4.3f)"'%t,par)
			Result( 'cross_corr'+ra+k+tag,
				['cross_corr'+ra+k+tag,rarray],'Overlay')

			#Image so far:
			Flow('Image'+ra+k+tag,'cross_corr'+ra+k,
				'window n3=%d|stack axis=3'%(i+1))

			Plot( 'Image'+ra+k+tag,'Image'+ra+k+tag,
			fdmod.cgrey('pclip=99 wheretitle=t  title="Ws*Wr(0->%4.3f)"'%t,par))

			Result( 'Image'+ra+k+tag,
				['Image'+ra+k+tag,rarray],'Overlay')
			


	    

	
		Flow('imgbyt'+ra+k,
		['img'+ra+'s-b_r-n'+k,'img'+ra+'s-b_r-b'+k,'img'+ra+'s-n_r-n'+k,'img'+ra+'s-n_r-b'+k,'img-diff'+ra+k],
		'cat axis=3 space=n ${SOURCES[1:5]}  | byte gainpanel=a pclip=99.9')


		Flow('illubyt'+ra+k,
		['illu'+ra+'s-b_r-n'+k,'illu'+ra+'s-b_r-b'+k,'illu'+ra+'s-n_r-n'+k,'illu'+ra+'s-n_r-b'+k],
		'cat axis=3 space=n ${SOURCES[1:4]}  | byte gainpanel=a pclip=99')


		Flow('citbyt'+ra+k,
		['cit'+ra+'s-b_r-n'+k,'cit'+ra+'s-b_r-b'+k,'cit'+ra+'s-n_r-n'+k,'cit'+ra+'s-n_r-b'+k,'cit-diff'+ra+k],
		'cat axis=3 space=n ${SOURCES[1:5]}  | byte gainpanel=a pclip=100')
	
		Flow('citbytx'+ra+k,
		['citx'+ra+'s-b_r-n'+k,'citx'+ra+'s-b_r-b'+k,'citx'+ra+'s-n_r-n'+k,'citx'+ra+'s-n_r-b'+k,'citx-diff'+ra+k],
		'cat axis=3 space=n ${SOURCES[1:5]}  | byte gainpanel=a pclip=100')





		im=0
		for cases in ['s-b_r-n','s-b_r-b','s-n_r-n','s-n_r-b','-diff-']:
			#Image plots
			Plot(  'img'+ra+cases+k,
			'imgbyt'+ra+k,
			'window n3=1 f3=%d |'%im + fdmod.cgrey('',par))
		
			Result('img'+ra+cases+k,['img'+ra+cases+k,'rr'+ra,'ssall','ggone'],'Overlay')
	
			# CIG plots
			Result('cit'+ra+cases+k,
				'citbyt'+ra+k,
				'window n3=1 f3=%d |'%im + adcig.tgrey('',par))

			# CIGX plots
			Result('citx'+ra+cases+k,
				'citbytx'+ra+k,
				'window n3=1 f3=%d |'%im + adcig.xgrey('',par))


			im=im+1



End()
        
