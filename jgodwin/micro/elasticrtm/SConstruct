from rsf.proj import *
import elasticfd as fd
import elasticplot as plot
import fdutil, stiffness

par = dict(
    nx = 601, dx=0.01, ox=0,
    nz = 401, dz=0.01, oz=0,
    nt = 6001, dt = 0.001, ot = 0.0,kt=100,freq=15,
    nb = 150,
    srctype=3,
    jsnap=5
)
fdpar = fdutil.defaults(nqx=201,oqx=2.0,oqz=1.5,nqz=101,**par)

fdutil.constant2d('vp',3.0,**par)
fdutil.constant2d('vs',1.5,**par)
fdutil.constant2d('ro',1.0,**par)
fdutil.constant2d('eps',0.2,**par)
fdutil.constant2d('del',0.2,**par)
#stiffness.vti2d('cc','vp','vs','ro','eps','del',None)
stiffness.iso2d('cc','vp','vs','ro',None)

fd.windowDensity('ro-win','ro',**par) # Special for elastic

fdutil.vertical2d('rr-A_',2.0,**par)
fdutil.vertical2d('rr-B_',4.5,**par)
Flow('rr-A','rr-A_','window n2=50 j2=3')
Flow('rr-B','rr-B_','window n2=20 j2=3 f2=20')
Flow('rr','rr-A rr-B','cat axis=2 ${SOURCES[1]}')

fdutil.point2d('sou1',2.2,3.3,**par)
fdutil.point2d('sou2',1.8,3.1,**par)
fdutil.point2d('sou3',2.0,3.3,**par)
fdutil.point2d('sou4',2.0,3.0,**par)
Flow('sou',['sou'+str(j) for j in range(1,5)],'cat axis=2 ${SOURCES[:-1]}')


#fd.rickerdc2('wave',**par)
par.pop('kt')
fd.rickerTensor2d('wave1',tzz=0.0,txx=-1.0,tzx=0.0,kt=100,**par)
fd.rickerTensor2d('wave2',tzz=0.0,txx=-1.0,tzx=1.0,kt=500,**par)
fd.rickerTensor2d('wave3',tzz=1.0,txx=-1.0,tzx=0.0,kt=1000,**par)
fd.rickerTensor2d('wave4',tzz=1.0,txx=1.0,tzx=0.0,kt=1500,**par)

Flow('wave',['wave'+str(j) for j in range(1,5)],
    'cat axis=1 ${SOURCES[:-1]}')
plot.tensorwavelet('wave')

fd.run('data','cc','ro-win','wave','sou','rr','wfld', ani=0,**fdpar)

fdpar['srctype'] = 1
#groups = [('A',None,50),('B',50,None)]
#groups = [('A',None,25),('B',25,50),('C',50,None)]
#groups = [('A',None,25),('B',25,50),('C',50,None)]
#groups = [
#    ('A',None,12),('B',12,24),('C',24,36),('D',36,50),('E',50,60),('F',60,None)]
#groups = [ ('A',None,12),('B',12,24),('C',24,36),('D',36,50)]
groups = []

d1 = 5
groups1 = range(0,50,d1)
for i in groups1:
    end = i+d1
    if end > 50:
        end = 50
    groups.append(('A%02d'%i,i,end))

d2 = 2
groups2 = range(50,70,d2)
for j in groups2:
    end = j+d2
    if end > 70:
        end = 70
    groups.append(('B%02d'%j,j,end))

ng = len(groups1)+len(groups2)
Flow('template1',None,
    '''
    spike n1=%d n2=%d nsp=0 | add add=1.0
    ''' % (ng,ng))

ng1 = len(groups1)
ng2 = len(groups2)
Flow('template2',None,
    '''
    spike n1=%d n2=%d nsp=4 mag=1.0,1.0,-1.0,-1.0
    k1=%d,%d,%d,%d l1=%d,%d,%d,%d k2=%d,%d,%d,%d l2=%d,%d,%d,%d
    ''' % (ng,ng,
           1,  ng1+1 ,ng1+1, 1,
           ng1,ng  ,    ng, ng1,
           1  ,ng1+1 ,   1, ng1+1,
           ng1,ng  ,   ng1,ng))

wflds = []
for ig in range(len(groups)):
    name,start,end = groups[ig]
    tag = name
    if not start:
        Flow('data'+tag,'data',
            '''
            window n1=%d
            ''' % end)
        Flow('rk'+tag,'rr',
            '''
            window n2=%d
            ''' % end)
    elif not end:
        Flow('data'+tag,'data',
            '''
            window f1=%d
            ''' % (start))
        Flow('rk'+tag,'rr',
            '''
            window f2=%d
            ''' % start)
    else:
        Flow('data'+tag,'data',
            '''
            window f1=%d n1=%d
            ''' % (start,end-start))
        Flow('rk'+tag,'rr',
            '''
            window f2=%d n2=%d
            ''' % (start,end-start))

    Flow('data'+tag+'-rev','data'+tag,
        '''
        reverse which=4 opt=i 
        ''')
    fd.run('junk-data'+tag,'cc','ro-win','data'+tag+'-rev',
        'rk'+tag,'rr','wfld'+tag, ani=0,**fdpar)
    Flow('wfld'+tag+'-scale','wfld'+tag,
        '''
        window f4=600 | 
        scale axis=1234
        ''')
    wflds.append('wfld'+tag+'-scale')
Flow('wfld-all',wflds,
    '''
    add mode=a ${SOURCES[1:-1]}
    ''')
Flow('sic',wflds,
    '''
    sfsemblance3d thr=0.5 ${SOURCES[1:-1]}
    ''')

wflds.append('template1')
wflds.append('template2')
wflds.append('./Mccmatrix.py')
Flow('cic ccmatrix',wflds,
    '''
    ./Mccmatrix.py ${SOURCES[:-1]} matrix=${TARGETS[1]}
    ''',stdin=0)

for i in ['z','x']:
    Flow('cic-'+i,'cic','window n3=1')
    for j in range(2):
        Flow('cic-'+i+'-%02d' % j,'cic-'+i,'window n3=1 f3=%d ' % j)
        Flow('cic-'+i+'-%02d-stk' % j,'cic-'+i,'window n3=1 f3=%d | stack axis=3' % j)
        Plot('cic-'+i+'-%02d' % j,'grey pclip=100 gainpanel=a')
        Plot('cic-'+i+'-%02d-stk' % j,
            'grey title="%s" pclip=100 gainpanel=a' % (i+'-'+str(j)))

Result('cic-stk',
    ['cic-'+i+'-%02d-stk' % j for i in ['z','x'] for j in range(2)],
    'TwoRows')
End()
