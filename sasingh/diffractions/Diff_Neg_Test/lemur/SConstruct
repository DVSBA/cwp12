#!/usr/bin/env python
# Exploding reflector modeling/migration demo
from rsf.proj import *
import fdmod as f
Program('neg2d','ent.c')
Program('test','sneg.c')

# ------------------------------------------------------------
par = dict(
    nx=1601, dx=0.010, ox=0, lx='x', ux='km',
    nz=701,  dz=0.010, oz=0, lz='z', uz='km',
    nt=5000, dt=0.001, ot=0, lt='t', ut='s',
    jsnap=100,
    kt=100,
    nb=100
    )
par['wweight']=5

# ------------------------------------------------------------
# set plotting parameters
f.param(par)

# ------------------------------------------------------------
# source coordinates (exploding reflectors)
f.boxarray('ss',
           5,     # vertical number
           2.5,   # vertical origin 
           0.5,   # vertical sampling
           21,    # horizontal number
           3.0,   # horizontal origin
           0.5,   # horizontal sampling
           par)
Plot('ss',f.ssplot('plotcol=2',par))

# ------------------------------------------------------------
# horizontal array
f.horizontal('tH',0.1,par)
par['jrH']=4    # jump (grid points)
par['orH']=0  # origin
par['nrH']=401  # number
par['crH']=4    # color

# window array
Flow('rH',
     'tH',
     'window j2=%d min2=%g n2=%d'%
     (par['jrH'],  # jump
      par['orH'],  # origin
      par['nrH'])) # number
    
# plot array
Plot('rH',
     f.rrplot('plotcol=%d'%par['crH'],par))

# ------------------------------------------------------------
# make density
Flow('dens',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g  |
     put label1=%(lz)s label2=%(lx)s unit1=%(uz)s unit2=%(ux)s
     ''' % par)

Flow('vbak','dens','math output="3.0"')
f.gauss2d('gauP', 6.0,1.5,0.75,0.75,par)
f.gauss2d('gauM',10.0,1.5,0.75,0.75,par)

Flow('velo',['vbak','gauP','gauM'],
     'add scale=1,+1,-1 ${SOURCES[1:3]}')

# ------------------------------------------------------------
# plot velocity
allvels = ['velo','vbak']
Flow('velall',allvels,
     '''
     cat axis=3 space=n ${SOURCES[1]} |
     byte gainpanel=a pclip=100 mean=y
     ''')

for v in allvels:
    Plot(  v,'velall',
           'window n3=1 f3=%d |'%allvels.index(v) +
           f.cgrey('allpos=y bias=2.5',par))

    # overlay sources and receivers
    Result(v,[v,'ss','rH'],'Overlay')

# ------------------------------------------------------------
# construct wavelet
f.wavelet('wav_',15,par) 

# transpose wavelet
Flow(  'wav','wav_','transp')      

# plot wavelet
Result('wav','window n2=1000 |'
       + f.waveplot('',par)) 

# ------------------------------------------------------------
# run FD modeling
f.awefd1('tmpH',  # data file (all receivers)
         'wfld',  # wavefield snapshots
         'wav',   # source wavelet
         'velo',  # velocity
         'dens',  # density
         'ss',    # source coordinates
         'rH',    # receiver coordinates
         'free=n',# optional flags
         par)

# ------------------------------------------------------------
# plot wavefield frames
nframes = int((par['nt']-1)/par['jsnap'])

f.wom('wfom','wfld','velo',1.86,par)
for i in range(nframes):
    tag = '-%02d'%i
    f.wframe('wfom'+tag,
             'wfom',i,'pclip=99',par)
    Plot(    'wfld'+tag,
            ['wfom'+tag,'ss','rH'],'Overlay')
Result('wfld',
       map(lambda x: 'wfld-%02d' % x,range(nframes)),
       'Movie')
    
# ------------------------------------------------------------
# undo wavelet delay
Flow('datH','tmpH',
     '''
     window squeeze=n f2=%(kt)d |
     pad end2=%(kt)d |
     put o2=%(ot)g
     ''' %par)
Result('datH','window j2=4 | transp |'
       + f.dgrey('pclip=100',par))

# ------------------------------------------------------------
# run FD migration
f.zom('imgH',  # image
      'datH',  # data
      'vbak',   # velocity
      'dens',   # density
      'rH',    # receiver coordinates
      'free=n', # optional flags
      par)

# plot images
Plot(  'imgH','bandpass flo=5 |' + f.cgrey('',par))
Result('imgH',['imgH','ss','rH'],'Overlay')

# ------------------------------------------------------------
# pad data
npad=250
#jumps 
jp=5
Flow('padH','datH','reverse which=2 opt=i verb=y | pad end2=%d'%npad)

# backpropagate 
f.awefd('tdat','twfl',
        'padH',
        'vbak','dens',
        'rH','rH',
        'jsnap=1 jdata=4',par)

# extract wavefield
Flow('wflH','twfl',
     'window f3=%d j3=%d |'%(par['nt']-npad,jp) +
     'bandpass flo=5') 
Result('wflH',f.cgrey('',par))
#       'byte gainpanel=a pclip=100 |' +
#       f.cgrey3d('',par))


wframes=int((npad*2)/jp) 
for j in range(wframes):
  tag= "-%03d"%j
  Flow('wflH'+tag,'wflH',
       'window n3=1 f3=%d' %(j))
  Plot('wflH'+tag, f.cgrey(' labelsz=9 ',par))

  Flow('neg12'+tag,['wflH'+tag,'test.exe'],
      '''
       ./${SOURCES[1]} box1=20 box2=20
      '''%par)
  Plot('neg12'+tag,f.cgrey('color=j',par))

  Flow('neg2dn'+tag,['wflH'+tag,'neg2d.exe'],
      '''
       ./${SOURCES[1]} box1=20 box2=20
       '''%par)
  Plot('neg2dn'+tag,f.cgrey('color=j',par))

  Flow('aNeg2d',map(lambda i: 'neg12-%03d' %i,range(wframes)),
       '''
       cat axis=3 space=n ${SOURCES[1:%d]} |
       scale axis=12
       '''%wframes)
  Flow('aNeg2dn',map(lambda i: 'neg2dn-%03d' %i ,range(wframes)),
       '''
       cat axis=3 space=n ${SOURCES[1:%d]} |
       scale axis=12
       '''%wframes)

Flow('awflH'   ,'wflH', 'byte gainpanel=a pclip=100')
Result('awflH',f.cgrey('',par))
#Plot('awflH','Movie')
#Plot('aNeg2d',f.cgrey('allpos=y color=j',par))
#Plot('aNeg2dn',f.cgrey('allpos=y color=j',par))
Flow('aNeg2dbyt'   ,'aNeg2d', 'byte gainpanel=a pclip=100')
Result('aNeg2dbyt',f.cgrey('color=j',par))
#Plot('aNeg2dbyt','Movie')
Flow('aNeg2dbytn'   ,'aNeg2dn', 'byte gainpanel=a pclip=100')
Result('aNeg2dbytn',f.cgrey('color=j',par))
#Plot('aNeg2dbytn','Movie')

#Result('Side_dif_neg',['aNeg2dbyt','awflH'],'SideBySideIso')
#Result('Side_dif_negn',['aNeg2dbytn','awflH'],'SideBySideIso')
#Result('VelNeg','aNeg2dbyt', 
#       'transp plane=23 | grey color=j labelsz=9')



End()

